<?php
/**
 * OrdersApi
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DigitalRiver\ApiSdk\ApiException;
use DigitalRiver\ApiSdk\Configuration;
use DigitalRiver\ApiSdk\HeaderSelector;
use DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrders
     *
     * Creates a new order.
     *
     * @param  \DigitalRiver\ApiSdk\Model\OrderRequest $order_request order_request (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DigitalRiver\ApiSdk\Model\Order|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors
     */
    public function createOrders($order_request = null)
    {
        list($response) = $this->createOrdersWithHttpInfo($order_request);
        return $response;
    }

    /**
     * Operation createOrdersWithHttpInfo
     *
     * Creates a new order.
     *
     * @param  \DigitalRiver\ApiSdk\Model\OrderRequest $order_request (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DigitalRiver\ApiSdk\Model\Order|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrdersWithHttpInfo($order_request = null)
    {
        $request = $this->createOrdersRequest($order_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\DigitalRiver\ApiSdk\Model\Order' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 408:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DigitalRiver\ApiSdk\Model\Order';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrdersAsync
     *
     * Creates a new order.
     *
     * @param  \DigitalRiver\ApiSdk\Model\OrderRequest $order_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrdersAsync($order_request = null)
    {
        return $this->createOrdersAsyncWithHttpInfo($order_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrdersAsyncWithHttpInfo
     *
     * Creates a new order.
     *
     * @param  \DigitalRiver\ApiSdk\Model\OrderRequest $order_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrdersAsyncWithHttpInfo($order_request = null)
    {
        $returnType = '\DigitalRiver\ApiSdk\Model\Order';
        $request = $this->createOrdersRequest($order_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrders'
     *
     * @param  \DigitalRiver\ApiSdk\Model\OrderRequest $order_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrdersRequest($order_request = null)
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($order_request)) {
            $_tempBody = $order_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        //$query = \GuzzleHttp\Psr7\build_query($queryParams);
        //this is changed for supporting deepobject in url in the form /skus?createdTime[lt]=2020-09-22T12:09:44Z
        $query = http_build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOrders
     *
     * Returns a list of orders.
     *
     * @param  map[string,\DateTime] $created_time A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the createdTime field equals to this timestamp   - **gt**&amp;mdash;return values where the createdTime field is after this timestamp   - **gte**&amp;mdash;return values where the createdTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the createdTime field is before this timestamp   - **lte**&amp;mdash;return values where the createdTime field is before or equal to this timestamp (optional)
     * @param  map[string,\DateTime] $updated_time A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the updatedTime field equals this timestamp   - **gt**&amp;mdash;return values where the updatedTime field is after this timestamp   - **gte**&amp;mdash;return values where the updatedTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the updatedTime field is before this timestamp   - **lte**&amp;mdash;return values where the updatedTime field is before or equal to this timestamp (optional)
     * @param  string $ending_before A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list. (optional)
     * @param  string $starting_after A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list. (optional)
     * @param  int $limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10. (optional)
     * @param  string[] $ids Only return objects with these IDs. (optional)
     * @param  string[] $upstream_ids Only return objects with these upstreamIds. (optional)
     * @param  map[string,string] $total_amount A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options:        - **eq**-return values where the amount field equals to this amount       - **gt**-return values where the amount field is greater than this amount       - **gte**-return values where the amount field is greater than or equal to this amount       - **lt**-return values where the amount field is less than this amount       - **lte**-return values where the amount field is less than or equal to this amount (optional)
     * @param  string $state Only return objects in the given state (optional)
     * @param  string $customer_id Only return orders for the given customer (optional)
     * @param  string $checkout_id Only return orders for the given checkout (optional)
     * @param  string $application_id Only return orders for the given application (optional)
     * @param  string $email Only return orders with the given email (optional)
     * @param  string $currency Only return orders in the given currency (optional)
     * @param  string $sku_id Only return orders containing this sku (optional)
     * @param  map[string,\DateTime] $in_review A filter on the list based on the order **stateTransitions** in_review field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions in_review field equals to this timestamp*   - **gt** - *return values where the stateTransitions in_review field is after this timestamp*   - **gte** - *return values where the stateTransitions in_review field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions in_review field is before this timestamp*   - **lte** - *return values where the stateTransitions in_review field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $pending_payment A filter on the list based on the order **stateTransitions** pending_payment field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions pending_payment field equals to this timestamp*   - **gt** - *return values where the stateTransitions pending_payment field is after this timestamp*   - **gte** - *return values where the stateTransitions pending_payment field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions pending_payment field is before this timestamp*   - **lte** - *return values where the stateTransitions pending_payment field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $accepted A filter on the list based on the order **stateTransitions** accepted field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions accepted field equals to this timestamp*   - **gt** - *return values where the stateTransitions accepted field is after this timestamp*   - **gte** - *return values where the stateTransitions accepted field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions accepted field is before this timestamp*   - **lte** - *return values where the stateTransitions accepted field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $blocked A filter on the list based on the order **stateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the stateTransitions blocked field is after this timestamp*   - **gte** - *return values where the stateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions blocked field is before this timestamp*   - **lte** - *return values where the stateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $cancelled A filter on the list based on the order **stateTransitions** cancelled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions cancelled field equals to this timestamp*   - **gt** - *return values where the stateTransitions cancelled field is after this timestamp*   - **gte** - *return values where the stateTransitions cancelled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions cancelled field is before this timestamp*   - **lte** - *return values where the stateTransitions cancelled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fulfilled A filter on the list based on the order **stateTransitions** fulfilled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions fulfilled field equals to this timestamp*   - **gt** - *return values where the stateTransitions fulfilled field is after this timestamp*   - **gte** - *return values where the stateTransitions fulfilled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions fulfilled field is before this timestamp*   - **lte** - *return values where the stateTransitions fulfilled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $complete A filter on the list based on the order **stateTransitions** complete field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions complete field equals to this timestamp*   - **gt** - *return values where the stateTransitions complete field is after this timestamp*   - **gte** - *return values where the stateTransitions complete field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions complete field is before this timestamp*   - **lte** - *return values where the stateTransitions complete field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $returned A filter on the list based on the order **stateTransitions** returned field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions returned field equals to this timestamp*   - **gt** - *return values where the stateTransitions returned field is after this timestamp*   - **gte** - *return values where the stateTransitions returned field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions returned field is before this timestamp*   - **lte** - *return values where the stateTransitions returned field is before or equal to this timestamp* (optional)
     * @param  string $fraud_state Only return orders in the given fraudState (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_blocked A filter on the list based on the order **fraudStateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions blocked field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions blocked field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_review_opened A filter on the list based on the order **fraudStateTransitions** review_opened field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions review_opened field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions review_opened field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions review_opened field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions review_opened field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions review_opened field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_passed A filter on the list based on the order **fraudStateTransitions** passed field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions passed field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions passed field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions passed field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions passed field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions passed field is before or equal to this timestamp* (optional)
     * @param  string $browser_ip Only return checkouts with this browser IP (optional)
     * @param  string $charge_type Only return orders with this charge type (optional)
     * @param  string $subscription_id Only return orders with this subscription identifier (optional)
     * @param  string $refunded_amount Only return orders with this refunded amount (optional)
     * @param  string $locale Only return checkouts with this locale (optional)
     * @param  string $customer_type Only return checkouts with this customer type (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DigitalRiver\ApiSdk\Model\ListOrdersResponse|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors
     */
    public function listOrders($created_time = null, $updated_time = null, $ending_before = null, $starting_after = null, $limit = null, $ids = null, $upstream_ids = null, $total_amount = null, $state = null, $customer_id = null, $checkout_id = null, $application_id = null, $email = null, $currency = null, $sku_id = null, $in_review = null, $pending_payment = null, $accepted = null, $blocked = null, $cancelled = null, $fulfilled = null, $complete = null, $returned = null, $fraud_state = null, $fraud_state_transitions_blocked = null, $fraud_state_transitions_review_opened = null, $fraud_state_transitions_passed = null, $browser_ip = null, $charge_type = null, $subscription_id = null, $refunded_amount = null, $locale = null, $customer_type = null)
    {
        list($response) = $this->listOrdersWithHttpInfo($created_time, $updated_time, $ending_before, $starting_after, $limit, $ids, $upstream_ids, $total_amount, $state, $customer_id, $checkout_id, $application_id, $email, $currency, $sku_id, $in_review, $pending_payment, $accepted, $blocked, $cancelled, $fulfilled, $complete, $returned, $fraud_state, $fraud_state_transitions_blocked, $fraud_state_transitions_review_opened, $fraud_state_transitions_passed, $browser_ip, $charge_type, $subscription_id, $refunded_amount, $locale, $customer_type);
        return $response;
    }

    /**
     * Operation listOrdersWithHttpInfo
     *
     * Returns a list of orders.
     *
     * @param  map[string,\DateTime] $created_time A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the createdTime field equals to this timestamp   - **gt**&amp;mdash;return values where the createdTime field is after this timestamp   - **gte**&amp;mdash;return values where the createdTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the createdTime field is before this timestamp   - **lte**&amp;mdash;return values where the createdTime field is before or equal to this timestamp (optional)
     * @param  map[string,\DateTime] $updated_time A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the updatedTime field equals this timestamp   - **gt**&amp;mdash;return values where the updatedTime field is after this timestamp   - **gte**&amp;mdash;return values where the updatedTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the updatedTime field is before this timestamp   - **lte**&amp;mdash;return values where the updatedTime field is before or equal to this timestamp (optional)
     * @param  string $ending_before A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list. (optional)
     * @param  string $starting_after A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list. (optional)
     * @param  int $limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10. (optional)
     * @param  string[] $ids Only return objects with these IDs. (optional)
     * @param  string[] $upstream_ids Only return objects with these upstreamIds. (optional)
     * @param  map[string,string] $total_amount A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options:        - **eq**-return values where the amount field equals to this amount       - **gt**-return values where the amount field is greater than this amount       - **gte**-return values where the amount field is greater than or equal to this amount       - **lt**-return values where the amount field is less than this amount       - **lte**-return values where the amount field is less than or equal to this amount (optional)
     * @param  string $state Only return objects in the given state (optional)
     * @param  string $customer_id Only return orders for the given customer (optional)
     * @param  string $checkout_id Only return orders for the given checkout (optional)
     * @param  string $application_id Only return orders for the given application (optional)
     * @param  string $email Only return orders with the given email (optional)
     * @param  string $currency Only return orders in the given currency (optional)
     * @param  string $sku_id Only return orders containing this sku (optional)
     * @param  map[string,\DateTime] $in_review A filter on the list based on the order **stateTransitions** in_review field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions in_review field equals to this timestamp*   - **gt** - *return values where the stateTransitions in_review field is after this timestamp*   - **gte** - *return values where the stateTransitions in_review field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions in_review field is before this timestamp*   - **lte** - *return values where the stateTransitions in_review field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $pending_payment A filter on the list based on the order **stateTransitions** pending_payment field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions pending_payment field equals to this timestamp*   - **gt** - *return values where the stateTransitions pending_payment field is after this timestamp*   - **gte** - *return values where the stateTransitions pending_payment field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions pending_payment field is before this timestamp*   - **lte** - *return values where the stateTransitions pending_payment field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $accepted A filter on the list based on the order **stateTransitions** accepted field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions accepted field equals to this timestamp*   - **gt** - *return values where the stateTransitions accepted field is after this timestamp*   - **gte** - *return values where the stateTransitions accepted field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions accepted field is before this timestamp*   - **lte** - *return values where the stateTransitions accepted field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $blocked A filter on the list based on the order **stateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the stateTransitions blocked field is after this timestamp*   - **gte** - *return values where the stateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions blocked field is before this timestamp*   - **lte** - *return values where the stateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $cancelled A filter on the list based on the order **stateTransitions** cancelled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions cancelled field equals to this timestamp*   - **gt** - *return values where the stateTransitions cancelled field is after this timestamp*   - **gte** - *return values where the stateTransitions cancelled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions cancelled field is before this timestamp*   - **lte** - *return values where the stateTransitions cancelled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fulfilled A filter on the list based on the order **stateTransitions** fulfilled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions fulfilled field equals to this timestamp*   - **gt** - *return values where the stateTransitions fulfilled field is after this timestamp*   - **gte** - *return values where the stateTransitions fulfilled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions fulfilled field is before this timestamp*   - **lte** - *return values where the stateTransitions fulfilled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $complete A filter on the list based on the order **stateTransitions** complete field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions complete field equals to this timestamp*   - **gt** - *return values where the stateTransitions complete field is after this timestamp*   - **gte** - *return values where the stateTransitions complete field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions complete field is before this timestamp*   - **lte** - *return values where the stateTransitions complete field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $returned A filter on the list based on the order **stateTransitions** returned field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions returned field equals to this timestamp*   - **gt** - *return values where the stateTransitions returned field is after this timestamp*   - **gte** - *return values where the stateTransitions returned field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions returned field is before this timestamp*   - **lte** - *return values where the stateTransitions returned field is before or equal to this timestamp* (optional)
     * @param  string $fraud_state Only return orders in the given fraudState (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_blocked A filter on the list based on the order **fraudStateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions blocked field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions blocked field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_review_opened A filter on the list based on the order **fraudStateTransitions** review_opened field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions review_opened field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions review_opened field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions review_opened field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions review_opened field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions review_opened field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_passed A filter on the list based on the order **fraudStateTransitions** passed field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions passed field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions passed field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions passed field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions passed field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions passed field is before or equal to this timestamp* (optional)
     * @param  string $browser_ip Only return checkouts with this browser IP (optional)
     * @param  string $charge_type Only return orders with this charge type (optional)
     * @param  string $subscription_id Only return orders with this subscription identifier (optional)
     * @param  string $refunded_amount Only return orders with this refunded amount (optional)
     * @param  string $locale Only return checkouts with this locale (optional)
     * @param  string $customer_type Only return checkouts with this customer type (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DigitalRiver\ApiSdk\Model\ListOrdersResponse|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrdersWithHttpInfo($created_time = null, $updated_time = null, $ending_before = null, $starting_after = null, $limit = null, $ids = null, $upstream_ids = null, $total_amount = null, $state = null, $customer_id = null, $checkout_id = null, $application_id = null, $email = null, $currency = null, $sku_id = null, $in_review = null, $pending_payment = null, $accepted = null, $blocked = null, $cancelled = null, $fulfilled = null, $complete = null, $returned = null, $fraud_state = null, $fraud_state_transitions_blocked = null, $fraud_state_transitions_review_opened = null, $fraud_state_transitions_passed = null, $browser_ip = null, $charge_type = null, $subscription_id = null, $refunded_amount = null, $locale = null, $customer_type = null)
    {
        $request = $this->listOrdersRequest($created_time, $updated_time, $ending_before, $starting_after, $limit, $ids, $upstream_ids, $total_amount, $state, $customer_id, $checkout_id, $application_id, $email, $currency, $sku_id, $in_review, $pending_payment, $accepted, $blocked, $cancelled, $fulfilled, $complete, $returned, $fraud_state, $fraud_state_transitions_blocked, $fraud_state_transitions_review_opened, $fraud_state_transitions_passed, $browser_ip, $charge_type, $subscription_id, $refunded_amount, $locale, $customer_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DigitalRiver\ApiSdk\Model\ListOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\ListOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 408:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DigitalRiver\ApiSdk\Model\ListOrdersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\ListOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOrdersAsync
     *
     * Returns a list of orders.
     *
     * @param  map[string,\DateTime] $created_time A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the createdTime field equals to this timestamp   - **gt**&amp;mdash;return values where the createdTime field is after this timestamp   - **gte**&amp;mdash;return values where the createdTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the createdTime field is before this timestamp   - **lte**&amp;mdash;return values where the createdTime field is before or equal to this timestamp (optional)
     * @param  map[string,\DateTime] $updated_time A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the updatedTime field equals this timestamp   - **gt**&amp;mdash;return values where the updatedTime field is after this timestamp   - **gte**&amp;mdash;return values where the updatedTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the updatedTime field is before this timestamp   - **lte**&amp;mdash;return values where the updatedTime field is before or equal to this timestamp (optional)
     * @param  string $ending_before A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list. (optional)
     * @param  string $starting_after A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list. (optional)
     * @param  int $limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10. (optional)
     * @param  string[] $ids Only return objects with these IDs. (optional)
     * @param  string[] $upstream_ids Only return objects with these upstreamIds. (optional)
     * @param  map[string,string] $total_amount A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options:        - **eq**-return values where the amount field equals to this amount       - **gt**-return values where the amount field is greater than this amount       - **gte**-return values where the amount field is greater than or equal to this amount       - **lt**-return values where the amount field is less than this amount       - **lte**-return values where the amount field is less than or equal to this amount (optional)
     * @param  string $state Only return objects in the given state (optional)
     * @param  string $customer_id Only return orders for the given customer (optional)
     * @param  string $checkout_id Only return orders for the given checkout (optional)
     * @param  string $application_id Only return orders for the given application (optional)
     * @param  string $email Only return orders with the given email (optional)
     * @param  string $currency Only return orders in the given currency (optional)
     * @param  string $sku_id Only return orders containing this sku (optional)
     * @param  map[string,\DateTime] $in_review A filter on the list based on the order **stateTransitions** in_review field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions in_review field equals to this timestamp*   - **gt** - *return values where the stateTransitions in_review field is after this timestamp*   - **gte** - *return values where the stateTransitions in_review field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions in_review field is before this timestamp*   - **lte** - *return values where the stateTransitions in_review field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $pending_payment A filter on the list based on the order **stateTransitions** pending_payment field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions pending_payment field equals to this timestamp*   - **gt** - *return values where the stateTransitions pending_payment field is after this timestamp*   - **gte** - *return values where the stateTransitions pending_payment field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions pending_payment field is before this timestamp*   - **lte** - *return values where the stateTransitions pending_payment field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $accepted A filter on the list based on the order **stateTransitions** accepted field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions accepted field equals to this timestamp*   - **gt** - *return values where the stateTransitions accepted field is after this timestamp*   - **gte** - *return values where the stateTransitions accepted field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions accepted field is before this timestamp*   - **lte** - *return values where the stateTransitions accepted field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $blocked A filter on the list based on the order **stateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the stateTransitions blocked field is after this timestamp*   - **gte** - *return values where the stateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions blocked field is before this timestamp*   - **lte** - *return values where the stateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $cancelled A filter on the list based on the order **stateTransitions** cancelled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions cancelled field equals to this timestamp*   - **gt** - *return values where the stateTransitions cancelled field is after this timestamp*   - **gte** - *return values where the stateTransitions cancelled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions cancelled field is before this timestamp*   - **lte** - *return values where the stateTransitions cancelled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fulfilled A filter on the list based on the order **stateTransitions** fulfilled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions fulfilled field equals to this timestamp*   - **gt** - *return values where the stateTransitions fulfilled field is after this timestamp*   - **gte** - *return values where the stateTransitions fulfilled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions fulfilled field is before this timestamp*   - **lte** - *return values where the stateTransitions fulfilled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $complete A filter on the list based on the order **stateTransitions** complete field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions complete field equals to this timestamp*   - **gt** - *return values where the stateTransitions complete field is after this timestamp*   - **gte** - *return values where the stateTransitions complete field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions complete field is before this timestamp*   - **lte** - *return values where the stateTransitions complete field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $returned A filter on the list based on the order **stateTransitions** returned field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions returned field equals to this timestamp*   - **gt** - *return values where the stateTransitions returned field is after this timestamp*   - **gte** - *return values where the stateTransitions returned field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions returned field is before this timestamp*   - **lte** - *return values where the stateTransitions returned field is before or equal to this timestamp* (optional)
     * @param  string $fraud_state Only return orders in the given fraudState (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_blocked A filter on the list based on the order **fraudStateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions blocked field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions blocked field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_review_opened A filter on the list based on the order **fraudStateTransitions** review_opened field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions review_opened field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions review_opened field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions review_opened field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions review_opened field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions review_opened field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_passed A filter on the list based on the order **fraudStateTransitions** passed field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions passed field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions passed field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions passed field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions passed field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions passed field is before or equal to this timestamp* (optional)
     * @param  string $browser_ip Only return checkouts with this browser IP (optional)
     * @param  string $charge_type Only return orders with this charge type (optional)
     * @param  string $subscription_id Only return orders with this subscription identifier (optional)
     * @param  string $refunded_amount Only return orders with this refunded amount (optional)
     * @param  string $locale Only return checkouts with this locale (optional)
     * @param  string $customer_type Only return checkouts with this customer type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOrdersAsync($created_time = null, $updated_time = null, $ending_before = null, $starting_after = null, $limit = null, $ids = null, $upstream_ids = null, $total_amount = null, $state = null, $customer_id = null, $checkout_id = null, $application_id = null, $email = null, $currency = null, $sku_id = null, $in_review = null, $pending_payment = null, $accepted = null, $blocked = null, $cancelled = null, $fulfilled = null, $complete = null, $returned = null, $fraud_state = null, $fraud_state_transitions_blocked = null, $fraud_state_transitions_review_opened = null, $fraud_state_transitions_passed = null, $browser_ip = null, $charge_type = null, $subscription_id = null, $refunded_amount = null, $locale = null, $customer_type = null)
    {
        return $this->listOrdersAsyncWithHttpInfo($created_time, $updated_time, $ending_before, $starting_after, $limit, $ids, $upstream_ids, $total_amount, $state, $customer_id, $checkout_id, $application_id, $email, $currency, $sku_id, $in_review, $pending_payment, $accepted, $blocked, $cancelled, $fulfilled, $complete, $returned, $fraud_state, $fraud_state_transitions_blocked, $fraud_state_transitions_review_opened, $fraud_state_transitions_passed, $browser_ip, $charge_type, $subscription_id, $refunded_amount, $locale, $customer_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOrdersAsyncWithHttpInfo
     *
     * Returns a list of orders.
     *
     * @param  map[string,\DateTime] $created_time A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the createdTime field equals to this timestamp   - **gt**&amp;mdash;return values where the createdTime field is after this timestamp   - **gte**&amp;mdash;return values where the createdTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the createdTime field is before this timestamp   - **lte**&amp;mdash;return values where the createdTime field is before or equal to this timestamp (optional)
     * @param  map[string,\DateTime] $updated_time A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the updatedTime field equals this timestamp   - **gt**&amp;mdash;return values where the updatedTime field is after this timestamp   - **gte**&amp;mdash;return values where the updatedTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the updatedTime field is before this timestamp   - **lte**&amp;mdash;return values where the updatedTime field is before or equal to this timestamp (optional)
     * @param  string $ending_before A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list. (optional)
     * @param  string $starting_after A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list. (optional)
     * @param  int $limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10. (optional)
     * @param  string[] $ids Only return objects with these IDs. (optional)
     * @param  string[] $upstream_ids Only return objects with these upstreamIds. (optional)
     * @param  map[string,string] $total_amount A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options:        - **eq**-return values where the amount field equals to this amount       - **gt**-return values where the amount field is greater than this amount       - **gte**-return values where the amount field is greater than or equal to this amount       - **lt**-return values where the amount field is less than this amount       - **lte**-return values where the amount field is less than or equal to this amount (optional)
     * @param  string $state Only return objects in the given state (optional)
     * @param  string $customer_id Only return orders for the given customer (optional)
     * @param  string $checkout_id Only return orders for the given checkout (optional)
     * @param  string $application_id Only return orders for the given application (optional)
     * @param  string $email Only return orders with the given email (optional)
     * @param  string $currency Only return orders in the given currency (optional)
     * @param  string $sku_id Only return orders containing this sku (optional)
     * @param  map[string,\DateTime] $in_review A filter on the list based on the order **stateTransitions** in_review field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions in_review field equals to this timestamp*   - **gt** - *return values where the stateTransitions in_review field is after this timestamp*   - **gte** - *return values where the stateTransitions in_review field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions in_review field is before this timestamp*   - **lte** - *return values where the stateTransitions in_review field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $pending_payment A filter on the list based on the order **stateTransitions** pending_payment field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions pending_payment field equals to this timestamp*   - **gt** - *return values where the stateTransitions pending_payment field is after this timestamp*   - **gte** - *return values where the stateTransitions pending_payment field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions pending_payment field is before this timestamp*   - **lte** - *return values where the stateTransitions pending_payment field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $accepted A filter on the list based on the order **stateTransitions** accepted field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions accepted field equals to this timestamp*   - **gt** - *return values where the stateTransitions accepted field is after this timestamp*   - **gte** - *return values where the stateTransitions accepted field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions accepted field is before this timestamp*   - **lte** - *return values where the stateTransitions accepted field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $blocked A filter on the list based on the order **stateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the stateTransitions blocked field is after this timestamp*   - **gte** - *return values where the stateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions blocked field is before this timestamp*   - **lte** - *return values where the stateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $cancelled A filter on the list based on the order **stateTransitions** cancelled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions cancelled field equals to this timestamp*   - **gt** - *return values where the stateTransitions cancelled field is after this timestamp*   - **gte** - *return values where the stateTransitions cancelled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions cancelled field is before this timestamp*   - **lte** - *return values where the stateTransitions cancelled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fulfilled A filter on the list based on the order **stateTransitions** fulfilled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions fulfilled field equals to this timestamp*   - **gt** - *return values where the stateTransitions fulfilled field is after this timestamp*   - **gte** - *return values where the stateTransitions fulfilled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions fulfilled field is before this timestamp*   - **lte** - *return values where the stateTransitions fulfilled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $complete A filter on the list based on the order **stateTransitions** complete field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions complete field equals to this timestamp*   - **gt** - *return values where the stateTransitions complete field is after this timestamp*   - **gte** - *return values where the stateTransitions complete field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions complete field is before this timestamp*   - **lte** - *return values where the stateTransitions complete field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $returned A filter on the list based on the order **stateTransitions** returned field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions returned field equals to this timestamp*   - **gt** - *return values where the stateTransitions returned field is after this timestamp*   - **gte** - *return values where the stateTransitions returned field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions returned field is before this timestamp*   - **lte** - *return values where the stateTransitions returned field is before or equal to this timestamp* (optional)
     * @param  string $fraud_state Only return orders in the given fraudState (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_blocked A filter on the list based on the order **fraudStateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions blocked field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions blocked field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_review_opened A filter on the list based on the order **fraudStateTransitions** review_opened field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions review_opened field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions review_opened field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions review_opened field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions review_opened field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions review_opened field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_passed A filter on the list based on the order **fraudStateTransitions** passed field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions passed field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions passed field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions passed field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions passed field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions passed field is before or equal to this timestamp* (optional)
     * @param  string $browser_ip Only return checkouts with this browser IP (optional)
     * @param  string $charge_type Only return orders with this charge type (optional)
     * @param  string $subscription_id Only return orders with this subscription identifier (optional)
     * @param  string $refunded_amount Only return orders with this refunded amount (optional)
     * @param  string $locale Only return checkouts with this locale (optional)
     * @param  string $customer_type Only return checkouts with this customer type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOrdersAsyncWithHttpInfo($created_time = null, $updated_time = null, $ending_before = null, $starting_after = null, $limit = null, $ids = null, $upstream_ids = null, $total_amount = null, $state = null, $customer_id = null, $checkout_id = null, $application_id = null, $email = null, $currency = null, $sku_id = null, $in_review = null, $pending_payment = null, $accepted = null, $blocked = null, $cancelled = null, $fulfilled = null, $complete = null, $returned = null, $fraud_state = null, $fraud_state_transitions_blocked = null, $fraud_state_transitions_review_opened = null, $fraud_state_transitions_passed = null, $browser_ip = null, $charge_type = null, $subscription_id = null, $refunded_amount = null, $locale = null, $customer_type = null)
    {
        $returnType = '\DigitalRiver\ApiSdk\Model\ListOrdersResponse';
        $request = $this->listOrdersRequest($created_time, $updated_time, $ending_before, $starting_after, $limit, $ids, $upstream_ids, $total_amount, $state, $customer_id, $checkout_id, $application_id, $email, $currency, $sku_id, $in_review, $pending_payment, $accepted, $blocked, $cancelled, $fulfilled, $complete, $returned, $fraud_state, $fraud_state_transitions_blocked, $fraud_state_transitions_review_opened, $fraud_state_transitions_passed, $browser_ip, $charge_type, $subscription_id, $refunded_amount, $locale, $customer_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOrders'
     *
     * @param  map[string,\DateTime] $created_time A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the createdTime field equals to this timestamp   - **gt**&amp;mdash;return values where the createdTime field is after this timestamp   - **gte**&amp;mdash;return values where the createdTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the createdTime field is before this timestamp   - **lte**&amp;mdash;return values where the createdTime field is before or equal to this timestamp (optional)
     * @param  map[string,\DateTime] $updated_time A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq**&amp;mdash;return values where the updatedTime field equals this timestamp   - **gt**&amp;mdash;return values where the updatedTime field is after this timestamp   - **gte**&amp;mdash;return values where the updatedTime field is after or equal to this timestamp   - **lt**&amp;mdash;return values where the updatedTime field is before this timestamp   - **lte**&amp;mdash;return values where the updatedTime field is before or equal to this timestamp (optional)
     * @param  string $ending_before A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list. (optional)
     * @param  string $starting_after A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list. (optional)
     * @param  int $limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10. (optional)
     * @param  string[] $ids Only return objects with these IDs. (optional)
     * @param  string[] $upstream_ids Only return objects with these upstreamIds. (optional)
     * @param  map[string,string] $total_amount A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options:        - **eq**-return values where the amount field equals to this amount       - **gt**-return values where the amount field is greater than this amount       - **gte**-return values where the amount field is greater than or equal to this amount       - **lt**-return values where the amount field is less than this amount       - **lte**-return values where the amount field is less than or equal to this amount (optional)
     * @param  string $state Only return objects in the given state (optional)
     * @param  string $customer_id Only return orders for the given customer (optional)
     * @param  string $checkout_id Only return orders for the given checkout (optional)
     * @param  string $application_id Only return orders for the given application (optional)
     * @param  string $email Only return orders with the given email (optional)
     * @param  string $currency Only return orders in the given currency (optional)
     * @param  string $sku_id Only return orders containing this sku (optional)
     * @param  map[string,\DateTime] $in_review A filter on the list based on the order **stateTransitions** in_review field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions in_review field equals to this timestamp*   - **gt** - *return values where the stateTransitions in_review field is after this timestamp*   - **gte** - *return values where the stateTransitions in_review field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions in_review field is before this timestamp*   - **lte** - *return values where the stateTransitions in_review field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $pending_payment A filter on the list based on the order **stateTransitions** pending_payment field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions pending_payment field equals to this timestamp*   - **gt** - *return values where the stateTransitions pending_payment field is after this timestamp*   - **gte** - *return values where the stateTransitions pending_payment field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions pending_payment field is before this timestamp*   - **lte** - *return values where the stateTransitions pending_payment field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $accepted A filter on the list based on the order **stateTransitions** accepted field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions accepted field equals to this timestamp*   - **gt** - *return values where the stateTransitions accepted field is after this timestamp*   - **gte** - *return values where the stateTransitions accepted field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions accepted field is before this timestamp*   - **lte** - *return values where the stateTransitions accepted field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $blocked A filter on the list based on the order **stateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the stateTransitions blocked field is after this timestamp*   - **gte** - *return values where the stateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions blocked field is before this timestamp*   - **lte** - *return values where the stateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $cancelled A filter on the list based on the order **stateTransitions** cancelled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions cancelled field equals to this timestamp*   - **gt** - *return values where the stateTransitions cancelled field is after this timestamp*   - **gte** - *return values where the stateTransitions cancelled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions cancelled field is before this timestamp*   - **lte** - *return values where the stateTransitions cancelled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fulfilled A filter on the list based on the order **stateTransitions** fulfilled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions fulfilled field equals to this timestamp*   - **gt** - *return values where the stateTransitions fulfilled field is after this timestamp*   - **gte** - *return values where the stateTransitions fulfilled field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions fulfilled field is before this timestamp*   - **lte** - *return values where the stateTransitions fulfilled field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $complete A filter on the list based on the order **stateTransitions** complete field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions complete field equals to this timestamp*   - **gt** - *return values where the stateTransitions complete field is after this timestamp*   - **gte** - *return values where the stateTransitions complete field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions complete field is before this timestamp*   - **lte** - *return values where the stateTransitions complete field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $returned A filter on the list based on the order **stateTransitions** returned field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the stateTransitions returned field equals to this timestamp*   - **gt** - *return values where the stateTransitions returned field is after this timestamp*   - **gte** - *return values where the stateTransitions returned field is after or equal to this timestamp*   - **lt** - *return values where the stateTransitions returned field is before this timestamp*   - **lte** - *return values where the stateTransitions returned field is before or equal to this timestamp* (optional)
     * @param  string $fraud_state Only return orders in the given fraudState (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_blocked A filter on the list based on the order **fraudStateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions blocked field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions blocked field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions blocked field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions blocked field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions blocked field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_review_opened A filter on the list based on the order **fraudStateTransitions** review_opened field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions review_opened field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions review_opened field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions review_opened field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions review_opened field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions review_opened field is before or equal to this timestamp* (optional)
     * @param  map[string,\DateTime] $fraud_state_transitions_passed A filter on the list based on the order **fraudStateTransitions** passed field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **eq** - *return values where the fraudStateTransitions passed field equals to this timestamp*   - **gt** - *return values where the fraudStateTransitions passed field is after this timestamp*   - **gte** - *return values where the fraudStateTransitions passed field is after or equal to this timestamp*   - **lt** - *return values where the fraudStateTransitions passed field is before this timestamp*   - **lte** - *return values where the fraudStateTransitions passed field is before or equal to this timestamp* (optional)
     * @param  string $browser_ip Only return checkouts with this browser IP (optional)
     * @param  string $charge_type Only return orders with this charge type (optional)
     * @param  string $subscription_id Only return orders with this subscription identifier (optional)
     * @param  string $refunded_amount Only return orders with this refunded amount (optional)
     * @param  string $locale Only return checkouts with this locale (optional)
     * @param  string $customer_type Only return checkouts with this customer type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listOrdersRequest($created_time = null, $updated_time = null, $ending_before = null, $starting_after = null, $limit = null, $ids = null, $upstream_ids = null, $total_amount = null, $state = null, $customer_id = null, $checkout_id = null, $application_id = null, $email = null, $currency = null, $sku_id = null, $in_review = null, $pending_payment = null, $accepted = null, $blocked = null, $cancelled = null, $fulfilled = null, $complete = null, $returned = null, $fraud_state = null, $fraud_state_transitions_blocked = null, $fraud_state_transitions_review_opened = null, $fraud_state_transitions_passed = null, $browser_ip = null, $charge_type = null, $subscription_id = null, $refunded_amount = null, $locale = null, $customer_type = null)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrdersApi.listOrders, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrdersApi.listOrders, must be bigger than or equal to 1.');
        }


        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($created_time !== null) {
            if('form' === 'deepObject' && is_array($created_time)) {
                foreach($created_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdTime'] = $created_time;
            }
        }
        // query params
        if ($updated_time !== null) {
            if('form' === 'deepObject' && is_array($updated_time)) {
                foreach($updated_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['updatedTime'] = $updated_time;
            }
        }
        // query params
        if ($ending_before !== null) {
            if('form' === 'form' && is_array($ending_before)) {
                foreach($ending_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endingBefore'] = $ending_before;
            }
        }
        // query params
        if ($starting_after !== null) {
            if('form' === 'form' && is_array($starting_after)) {
                foreach($starting_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startingAfter'] = $starting_after;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($upstream_ids !== null) {
            if('form' === 'form' && is_array($upstream_ids)) {
                foreach($upstream_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['upstreamIds'] = $upstream_ids;
            }
        }
        // query params
        if ($total_amount !== null) {
            if('form' === 'deepObject' && is_array($total_amount)) {
                foreach($total_amount as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalAmount'] = $total_amount;
            }
        }
        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($customer_id !== null) {
            if('form' === 'form' && is_array($customer_id)) {
                foreach($customer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customerId'] = $customer_id;
            }
        }
        // query params
        if ($checkout_id !== null) {
            if('form' === 'form' && is_array($checkout_id)) {
                foreach($checkout_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['checkoutId'] = $checkout_id;
            }
        }
        // query params
        if ($application_id !== null) {
            if('form' === 'form' && is_array($application_id)) {
                foreach($application_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['applicationId'] = $application_id;
            }
        }
        // query params
        if ($email !== null) {
            if('form' === 'form' && is_array($email)) {
                foreach($email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['email'] = $email;
            }
        }
        // query params
        if ($currency !== null) {
            if('form' === 'form' && is_array($currency)) {
                foreach($currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currency'] = $currency;
            }
        }
        // query params
        if ($sku_id !== null) {
            if('form' === 'form' && is_array($sku_id)) {
                foreach($sku_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skuId'] = $sku_id;
            }
        }
        // query params
        if ($in_review !== null) {
            if('form' === 'deepObject' && is_array($in_review)) {
                foreach($in_review as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['in_review'] = $in_review;
            }
        }
        // query params
        if ($pending_payment !== null) {
            if('form' === 'deepObject' && is_array($pending_payment)) {
                foreach($pending_payment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pending_payment'] = $pending_payment;
            }
        }
        // query params
        if ($accepted !== null) {
            if('form' === 'deepObject' && is_array($accepted)) {
                foreach($accepted as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['accepted'] = $accepted;
            }
        }
        // query params
        if ($blocked !== null) {
            if('form' === 'deepObject' && is_array($blocked)) {
                foreach($blocked as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['blocked'] = $blocked;
            }
        }
        // query params
        if ($cancelled !== null) {
            if('form' === 'deepObject' && is_array($cancelled)) {
                foreach($cancelled as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cancelled'] = $cancelled;
            }
        }
        // query params
        if ($fulfilled !== null) {
            if('form' === 'deepObject' && is_array($fulfilled)) {
                foreach($fulfilled as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fulfilled'] = $fulfilled;
            }
        }
        // query params
        if ($complete !== null) {
            if('form' === 'deepObject' && is_array($complete)) {
                foreach($complete as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['complete'] = $complete;
            }
        }
        // query params
        if ($returned !== null) {
            if('form' === 'deepObject' && is_array($returned)) {
                foreach($returned as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['returned'] = $returned;
            }
        }
        // query params
        if ($fraud_state !== null) {
            if('form' === 'form' && is_array($fraud_state)) {
                foreach($fraud_state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fraudState'] = $fraud_state;
            }
        }
        // query params
        if ($fraud_state_transitions_blocked !== null) {
            if('form' === 'deepObject' && is_array($fraud_state_transitions_blocked)) {
                foreach($fraud_state_transitions_blocked as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fraudStateTransitions.blocked'] = $fraud_state_transitions_blocked;
            }
        }
        // query params
        if ($fraud_state_transitions_review_opened !== null) {
            if('form' === 'deepObject' && is_array($fraud_state_transitions_review_opened)) {
                foreach($fraud_state_transitions_review_opened as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fraudStateTransitions.review_opened'] = $fraud_state_transitions_review_opened;
            }
        }
        // query params
        if ($fraud_state_transitions_passed !== null) {
            if('form' === 'deepObject' && is_array($fraud_state_transitions_passed)) {
                foreach($fraud_state_transitions_passed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fraudStateTransitions.passed'] = $fraud_state_transitions_passed;
            }
        }
        // query params
        if ($browser_ip !== null) {
            if('form' === 'form' && is_array($browser_ip)) {
                foreach($browser_ip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['browserIp'] = $browser_ip;
            }
        }
        // query params
        if ($charge_type !== null) {
            if('form' === 'form' && is_array($charge_type)) {
                foreach($charge_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['chargeType'] = $charge_type;
            }
        }
        // query params
        if ($subscription_id !== null) {
            if('form' === 'form' && is_array($subscription_id)) {
                foreach($subscription_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subscriptionId'] = $subscription_id;
            }
        }
        // query params
        if ($refunded_amount !== null) {
            if('form' === 'form' && is_array($refunded_amount)) {
                foreach($refunded_amount as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['refundedAmount'] = $refunded_amount;
            }
        }
        // query params
        if ($locale !== null) {
            if('form' === 'form' && is_array($locale)) {
                foreach($locale as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locale'] = $locale;
            }
        }
        // query params
        if ($customer_type !== null) {
            if('form' === 'form' && is_array($customer_type)) {
                foreach($customer_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customerType'] = $customer_type;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        //$query = \GuzzleHttp\Psr7\build_query($queryParams);
        //this is changed for supporting deepobject in url in the form /skus?createdTime[lt]=2020-09-22T12:09:44Z
        $query = http_build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveOrderTracking
     *
     * Tracks Global Logistics shipments.
     *
     * @param  string $id Order ID (required)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DigitalRiver\ApiSdk\Model\OrderTracking|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors
     */
    public function retrieveOrderTracking($id)
    {
        list($response) = $this->retrieveOrderTrackingWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation retrieveOrderTrackingWithHttpInfo
     *
     * Tracks Global Logistics shipments.
     *
     * @param  string $id Order ID (required)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DigitalRiver\ApiSdk\Model\OrderTracking|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveOrderTrackingWithHttpInfo($id)
    {
        $request = $this->retrieveOrderTrackingRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DigitalRiver\ApiSdk\Model\OrderTracking' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\OrderTracking', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 408:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DigitalRiver\ApiSdk\Model\OrderTracking';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\OrderTracking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveOrderTrackingAsync
     *
     * Tracks Global Logistics shipments.
     *
     * @param  string $id Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOrderTrackingAsync($id)
    {
        return $this->retrieveOrderTrackingAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveOrderTrackingAsyncWithHttpInfo
     *
     * Tracks Global Logistics shipments.
     *
     * @param  string $id Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOrderTrackingAsyncWithHttpInfo($id)
    {
        $returnType = '\DigitalRiver\ApiSdk\Model\OrderTracking';
        $request = $this->retrieveOrderTrackingRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveOrderTracking'
     *
     * @param  string $id Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveOrderTrackingRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveOrderTracking'
            );
        }

        $resourcePath = '/orders/{id}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        //$query = \GuzzleHttp\Psr7\build_query($queryParams);
        //this is changed for supporting deepobject in url in the form /skus?createdTime[lt]=2020-09-22T12:09:44Z
        $query = http_build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveOrders
     *
     * Gets an order by ID.
     *
     * @param  string $id Order ID (required)
     * @param  bool $expand Enhanced Payload (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DigitalRiver\ApiSdk\Model\Order|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors
     */
    public function retrieveOrders($id, $expand = null)
    {
        list($response) = $this->retrieveOrdersWithHttpInfo($id, $expand);
        return $response;
    }

    /**
     * Operation retrieveOrdersWithHttpInfo
     *
     * Gets an order by ID.
     *
     * @param  string $id Order ID (required)
     * @param  bool $expand Enhanced Payload (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DigitalRiver\ApiSdk\Model\Order|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveOrdersWithHttpInfo($id, $expand = null)
    {
        $request = $this->retrieveOrdersRequest($id, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DigitalRiver\ApiSdk\Model\Order' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 408:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DigitalRiver\ApiSdk\Model\Order';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveOrdersAsync
     *
     * Gets an order by ID.
     *
     * @param  string $id Order ID (required)
     * @param  bool $expand Enhanced Payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOrdersAsync($id, $expand = null)
    {
        return $this->retrieveOrdersAsyncWithHttpInfo($id, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveOrdersAsyncWithHttpInfo
     *
     * Gets an order by ID.
     *
     * @param  string $id Order ID (required)
     * @param  bool $expand Enhanced Payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOrdersAsyncWithHttpInfo($id, $expand = null)
    {
        $returnType = '\DigitalRiver\ApiSdk\Model\Order';
        $request = $this->retrieveOrdersRequest($id, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveOrders'
     *
     * @param  string $id Order ID (required)
     * @param  bool $expand Enhanced Payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveOrdersRequest($id, $expand = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveOrders'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            if('form' === 'form' && is_array($expand)) {
                foreach($expand as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expand'] = $expand;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        //$query = \GuzzleHttp\Psr7\build_query($queryParams);
        //this is changed for supporting deepobject in url in the form /skus?createdTime[lt]=2020-09-22T12:09:44Z
        $query = http_build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrders
     *
     * Updates an existing order.
     *
     * @param  string $id Order ID (required)
     * @param  \DigitalRiver\ApiSdk\Model\UpdateOrderRequest $update_order_request update_order_request (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DigitalRiver\ApiSdk\Model\Order|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors
     */
    public function updateOrders($id, $update_order_request = null)
    {
        list($response) = $this->updateOrdersWithHttpInfo($id, $update_order_request);
        return $response;
    }

    /**
     * Operation updateOrdersWithHttpInfo
     *
     * Updates an existing order.
     *
     * @param  string $id Order ID (required)
     * @param  \DigitalRiver\ApiSdk\Model\UpdateOrderRequest $update_order_request (optional)
     *
     * @throws \DigitalRiver\ApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DigitalRiver\ApiSdk\Model\Order|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors|\DigitalRiver\ApiSdk\Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrdersWithHttpInfo($id, $update_order_request = null)
    {
        $request = $this->updateOrdersRequest($id, $update_order_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DigitalRiver\ApiSdk\Model\Order' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 408:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\DigitalRiver\ApiSdk\Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DigitalRiver\ApiSdk\Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DigitalRiver\ApiSdk\Model\Order';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 408:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DigitalRiver\ApiSdk\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrdersAsync
     *
     * Updates an existing order.
     *
     * @param  string $id Order ID (required)
     * @param  \DigitalRiver\ApiSdk\Model\UpdateOrderRequest $update_order_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrdersAsync($id, $update_order_request = null)
    {
        return $this->updateOrdersAsyncWithHttpInfo($id, $update_order_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrdersAsyncWithHttpInfo
     *
     * Updates an existing order.
     *
     * @param  string $id Order ID (required)
     * @param  \DigitalRiver\ApiSdk\Model\UpdateOrderRequest $update_order_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrdersAsyncWithHttpInfo($id, $update_order_request = null)
    {
        $returnType = '\DigitalRiver\ApiSdk\Model\Order';
        $request = $this->updateOrdersRequest($id, $update_order_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrders'
     *
     * @param  string $id Order ID (required)
     * @param  \DigitalRiver\ApiSdk\Model\UpdateOrderRequest $update_order_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateOrdersRequest($id, $update_order_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateOrders'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_order_request)) {
            $_tempBody = $update_order_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        //$query = \GuzzleHttp\Psr7\build_query($queryParams);
        //this is changed for supporting deepobject in url in the form /skus?createdTime[lt]=2020-09-22T12:09:44Z
        $query = http_build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
