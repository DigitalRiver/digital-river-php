<?php
/**
 * Webhook
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * Webhook Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Webhook implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_time' => '\DateTime',
        'updated_time' => '\DateTime',
        'types' => 'string[]',
        'api_version' => 'string',
        'enabled' => 'bool',
        'address' => 'string',
        'transport_type' => 'string',
        'oauth' => '\DigitalRiver\ApiSdk\Model\WebhookOauth',
        'authentication' => '\DigitalRiver\ApiSdk\Model\WebhookRequestAuthentication'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'created_time' => 'date-time',
        'updated_time' => 'date-time',
        'types' => null,
        'api_version' => null,
        'enabled' => null,
        'address' => null,
        'transport_type' => null,
        'oauth' => null,
        'authentication' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime',
        'types' => 'types',
        'api_version' => 'apiVersion',
        'enabled' => 'enabled',
        'address' => 'address',
        'transport_type' => 'transportType',
        'oauth' => 'oauth',
        'authentication' => 'authentication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_time' => 'setCreatedTime',
        'updated_time' => 'setUpdatedTime',
        'types' => 'setTypes',
        'api_version' => 'setApiVersion',
        'enabled' => 'setEnabled',
        'address' => 'setAddress',
        'transport_type' => 'setTransportType',
        'oauth' => 'setOauth',
        'authentication' => 'setAuthentication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_time' => 'getCreatedTime',
        'updated_time' => 'getUpdatedTime',
        'types' => 'getTypes',
        'api_version' => 'getApiVersion',
        'enabled' => 'getEnabled',
        'address' => 'getAddress',
        'transport_type' => 'getTransportType',
        'oauth' => 'getOauth',
        'authentication' => 'getAuthentication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const API_VERSION__DEFAULT = 'default';
    const API_VERSION_YYYY_MM_DD = '<YYYY-MM-DD>';
    const TRANSPORT_TYPE_HTTP = 'HTTP';
    const TRANSPORT_TYPE_OAUTH = 'OAUTH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApiVersionAllowableValues()
    {
       $allowable = [
            self::API_VERSION__DEFAULT,
            self::API_VERSION_YYYY_MM_DD,
        ];

        $allowableAllCase = array_unique(array_merge(array_map('strtolower', $allowable), $allowable));
        return $allowableAllCase;
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransportTypeAllowableValues()
    {
       $allowable = [
            self::TRANSPORT_TYPE_HTTP,
            self::TRANSPORT_TYPE_OAUTH,
        ];

        $allowableAllCase = array_unique(array_merge(array_map('strtolower', $allowable), $allowable));
        return $allowableAllCase;
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
        $this->container['types'] = isset($data['types']) ? $data['types'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : 'HTTP';
        $this->container['oauth'] = isset($data['oauth']) ? $data['oauth'] : null;
        $this->container['authentication'] = isset($data['authentication']) ? $data['authentication'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApiVersionAllowableValues();
       
        if (!is_null($this->container['api_version']) && !in_array(strtolower($this->container['api_version']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'api_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransportTypeAllowableValues();
       
        if (!is_null($this->container['transport_type']) && !in_array(strtolower($this->container['transport_type']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transport_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time Time at which the webhook was created
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time Time at which the webhook was updated
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types types
     *
     * @return $this
     */
    public function setTypes($types)
    {
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets api_version
     *
     * @return string|null
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     *
     * @param string|null $api_version Indicates whether the webhook is configured for the current, default version of the API or the version specified by YYYY-MM-DD.
     *
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $allowedValues = $this->getApiVersionAllowableValues();
        if (!is_null($api_version) && !in_array(strtolower($api_version), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'api_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Indicate that webhook is enabled and receives notifications or is not enabled and does not receive notifications
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address URL of the webhook endpoint on your server you have set up to receive webhook notifications. Webhook data is sent as JSON in the POST request body. The full event details are included and can be used directly, after parsing the JSON into an Event object.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string|null
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string|null $transport_type transport_type
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $allowedValues = $this->getTransportTypeAllowableValues();
        if (!is_null($transport_type) && !in_array(strtolower($transport_type), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transport_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets oauth
     *
     * @return \DigitalRiver\ApiSdk\Model\WebhookOauth|null
     */
    public function getOauth()
    {
        return $this->container['oauth'];
    }

    /**
     * Sets oauth
     *
     * @param \DigitalRiver\ApiSdk\Model\WebhookOauth|null $oauth oauth
     *
     * @return $this
     */
    public function setOauth($oauth)
    {
        $this->container['oauth'] = $oauth;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return \DigitalRiver\ApiSdk\Model\WebhookRequestAuthentication|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \DigitalRiver\ApiSdk\Model\WebhookRequestAuthentication|null $authentication authentication
     *
     * @return $this
     */
    public function setAuthentication($authentication)
    {
        $this->container['authentication'] = $authentication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


