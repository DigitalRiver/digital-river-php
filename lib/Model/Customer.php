<?php
/**
 * Customer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_time' => '\DateTime',
        'email' => 'string',
        'shipping' => '\DigitalRiver\ApiSdk\Model\Shipping',
        'default_source_id' => 'string',
        'sources' => '\DigitalRiver\ApiSdk\Model\Source[]',
        'tax_identifiers' => '\DigitalRiver\ApiSdk\Model\CustomerTaxIdentifier[]',
        'tax_certificates' => '\DigitalRiver\ApiSdk\Model\TaxCertificate[]',
        'request_to_be_forgotten' => 'bool',
        'type' => '\DigitalRiver\ApiSdk\Model\CustomerType1',
        'metadata' => 'map[string,AnyType]',
        'locale' => 'string',
        'enabled' => 'bool',
        'live_mode' => 'bool',
        'updated_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_time' => 'date-time',
        'email' => 'email',
        'shipping' => null,
        'default_source_id' => 'uuid',
        'sources' => null,
        'tax_identifiers' => null,
        'tax_certificates' => null,
        'request_to_be_forgotten' => null,
        'type' => null,
        'metadata' => null,
        'locale' => null,
        'enabled' => null,
        'live_mode' => null,
        'updated_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_time' => 'createdTime',
        'email' => 'email',
        'shipping' => 'shipping',
        'default_source_id' => 'defaultSourceId',
        'sources' => 'sources',
        'tax_identifiers' => 'taxIdentifiers',
        'tax_certificates' => 'taxCertificates',
        'request_to_be_forgotten' => 'requestToBeForgotten',
        'type' => 'type',
        'metadata' => 'metadata',
        'locale' => 'locale',
        'enabled' => 'enabled',
        'live_mode' => 'liveMode',
        'updated_time' => 'updatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_time' => 'setCreatedTime',
        'email' => 'setEmail',
        'shipping' => 'setShipping',
        'default_source_id' => 'setDefaultSourceId',
        'sources' => 'setSources',
        'tax_identifiers' => 'setTaxIdentifiers',
        'tax_certificates' => 'setTaxCertificates',
        'request_to_be_forgotten' => 'setRequestToBeForgotten',
        'type' => 'setType',
        'metadata' => 'setMetadata',
        'locale' => 'setLocale',
        'enabled' => 'setEnabled',
        'live_mode' => 'setLiveMode',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_time' => 'getCreatedTime',
        'email' => 'getEmail',
        'shipping' => 'getShipping',
        'default_source_id' => 'getDefaultSourceId',
        'sources' => 'getSources',
        'tax_identifiers' => 'getTaxIdentifiers',
        'tax_certificates' => 'getTaxCertificates',
        'request_to_be_forgotten' => 'getRequestToBeForgotten',
        'type' => 'getType',
        'metadata' => 'getMetadata',
        'locale' => 'getLocale',
        'enabled' => 'getEnabled',
        'live_mode' => 'getLiveMode',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['default_source_id'] = isset($data['default_source_id']) ? $data['default_source_id'] : null;
        $this->container['sources'] = isset($data['sources']) ? $data['sources'] : null;
        $this->container['tax_identifiers'] = isset($data['tax_identifiers']) ? $data['tax_identifiers'] : null;
        $this->container['tax_certificates'] = isset($data['tax_certificates']) ? $data['tax_certificates'] : null;
        $this->container['request_to_be_forgotten'] = isset($data['request_to_be_forgotten']) ? $data['request_to_be_forgotten'] : false;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['live_mode'] = isset($data['live_mode']) ? $data['live_mode'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the customer.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time The time at which the customer was created.
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The customer email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \DigitalRiver\ApiSdk\Model\Shipping|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \DigitalRiver\ApiSdk\Model\Shipping|null $shipping shipping
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets default_source_id
     *
     * @return string|null
     */
    public function getDefaultSourceId()
    {
        return $this->container['default_source_id'];
    }

    /**
     * Sets default_source_id
     *
     * @param string|null $default_source_id The identifier of the default payment source attached to this customer.
     *
     * @return $this
     */
    public function setDefaultSourceId($default_source_id)
    {
        $this->container['default_source_id'] = $default_source_id;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return \DigitalRiver\ApiSdk\Model\Source[]|null
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param \DigitalRiver\ApiSdk\Model\Source[]|null $sources An array of Source objects attached to this Customer.
     *
     * @return $this
     */
    public function setSources($sources)
    {
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets tax_identifiers
     *
     * @return \DigitalRiver\ApiSdk\Model\CustomerTaxIdentifier[]|null
     */
    public function getTaxIdentifiers()
    {
        return $this->container['tax_identifiers'];
    }

    /**
     * Sets tax_identifiers
     *
     * @param \DigitalRiver\ApiSdk\Model\CustomerTaxIdentifier[]|null $tax_identifiers A list of [tax identifiers](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/customers/setting-tax-related-attributes#tax-identifiers) for this customer.
     *
     * @return $this
     */
    public function setTaxIdentifiers($tax_identifiers)
    {
        $this->container['tax_identifiers'] = $tax_identifiers;

        return $this;
    }

    /**
     * Gets tax_certificates
     *
     * @return \DigitalRiver\ApiSdk\Model\TaxCertificate[]|null
     */
    public function getTaxCertificates()
    {
        return $this->container['tax_certificates'];
    }

    /**
     * Sets tax_certificates
     *
     * @param \DigitalRiver\ApiSdk\Model\TaxCertificate[]|null $tax_certificates A list of tax certificates for this customer.
     *
     * @return $this
     */
    public function setTaxCertificates($tax_certificates)
    {
        $this->container['tax_certificates'] = $tax_certificates;

        return $this;
    }

    /**
     * Gets request_to_be_forgotten
     *
     * @return bool|null
     */
    public function getRequestToBeForgotten()
    {
        return $this->container['request_to_be_forgotten'];
    }

    /**
     * Sets request_to_be_forgotten
     *
     * @param bool|null $request_to_be_forgotten If true, indicates this customer has requested to be forgotten.
     *
     * @return $this
     */
    public function setRequestToBeForgotten($request_to_be_forgotten)
    {
        $this->container['request_to_be_forgotten'] = $request_to_be_forgotten;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \DigitalRiver\ApiSdk\Model\CustomerType1|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \DigitalRiver\ApiSdk\Model\CustomerType1|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,AnyType]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,AnyType]|null $metadata Key-value pairs used to store additional data. Value can be string, boolean or integer types.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale A locale designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Usually used to disable the customer. The default is <code>true</code>. If <code>false</code>, attempts to create orders for the customer will fail.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets live_mode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['live_mode'];
    }

    /**
     * Sets live_mode
     *
     * @param bool|null $live_mode Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.
     *
     * @return $this
     */
    public function setLiveMode($live_mode)
    {
        $this->container['live_mode'] = $live_mode;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time Time at which the customer was last updated.
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


