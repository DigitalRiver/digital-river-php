<?php
/**
 * OrderStateTransitions
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * OrderStateTransitions Class Doc Comment
 *
 * @category Class
 * @description Timestamps that indicate when the state transition occurred.
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderStateTransitions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderStateTransitions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accepted' => '\DateTime',
        'pending_payment' => '\DateTime',
        'in_review' => '\DateTime',
        'complete' => '\DateTime',
        'dispute' => '\DateTime',
        'cancelled' => '\DateTime',
        'fulfilled' => '\DateTime',
        'blocked' => '\DateTime',
        'returned' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accepted' => 'date-time',
        'pending_payment' => 'date-time',
        'in_review' => 'date-time',
        'complete' => 'date-time',
        'dispute' => 'date-time',
        'cancelled' => 'date-time',
        'fulfilled' => 'date-time',
        'blocked' => 'date-time',
        'returned' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepted' => 'accepted',
        'pending_payment' => 'pending_payment',
        'in_review' => 'in_review',
        'complete' => 'complete',
        'dispute' => 'dispute',
        'cancelled' => 'cancelled',
        'fulfilled' => 'fulfilled',
        'blocked' => 'blocked',
        'returned' => 'returned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepted' => 'setAccepted',
        'pending_payment' => 'setPendingPayment',
        'in_review' => 'setInReview',
        'complete' => 'setComplete',
        'dispute' => 'setDispute',
        'cancelled' => 'setCancelled',
        'fulfilled' => 'setFulfilled',
        'blocked' => 'setBlocked',
        'returned' => 'setReturned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepted' => 'getAccepted',
        'pending_payment' => 'getPendingPayment',
        'in_review' => 'getInReview',
        'complete' => 'getComplete',
        'dispute' => 'getDispute',
        'cancelled' => 'getCancelled',
        'fulfilled' => 'getFulfilled',
        'blocked' => 'getBlocked',
        'returned' => 'getReturned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted'] = isset($data['accepted']) ? $data['accepted'] : null;
        $this->container['pending_payment'] = isset($data['pending_payment']) ? $data['pending_payment'] : null;
        $this->container['in_review'] = isset($data['in_review']) ? $data['in_review'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['dispute'] = isset($data['dispute']) ? $data['dispute'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
        $this->container['fulfilled'] = isset($data['fulfilled']) ? $data['fulfilled'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['returned'] = isset($data['returned']) ? $data['returned'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepted
     *
     * @return \DateTime|null
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param \DateTime|null $accepted accepted
     *
     * @return $this
     */
    public function setAccepted($accepted)
    {
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets pending_payment
     *
     * @return \DateTime|null
     */
    public function getPendingPayment()
    {
        return $this->container['pending_payment'];
    }

    /**
     * Sets pending_payment
     *
     * @param \DateTime|null $pending_payment pending_payment
     *
     * @return $this
     */
    public function setPendingPayment($pending_payment)
    {
        $this->container['pending_payment'] = $pending_payment;

        return $this;
    }

    /**
     * Gets in_review
     *
     * @return \DateTime|null
     */
    public function getInReview()
    {
        return $this->container['in_review'];
    }

    /**
     * Sets in_review
     *
     * @param \DateTime|null $in_review in_review
     *
     * @return $this
     */
    public function setInReview($in_review)
    {
        $this->container['in_review'] = $in_review;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return \DateTime|null
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param \DateTime|null $complete complete
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets dispute
     *
     * @return \DateTime|null
     */
    public function getDispute()
    {
        return $this->container['dispute'];
    }

    /**
     * Sets dispute
     *
     * @param \DateTime|null $dispute dispute
     *
     * @return $this
     */
    public function setDispute($dispute)
    {
        $this->container['dispute'] = $dispute;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return \DateTime|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param \DateTime|null $cancelled cancelled
     *
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets fulfilled
     *
     * @return \DateTime|null
     */
    public function getFulfilled()
    {
        return $this->container['fulfilled'];
    }

    /**
     * Sets fulfilled
     *
     * @param \DateTime|null $fulfilled fulfilled
     *
     * @return $this
     */
    public function setFulfilled($fulfilled)
    {
        $this->container['fulfilled'] = $fulfilled;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return \DateTime|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param \DateTime|null $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets returned
     *
     * @return \DateTime|null
     */
    public function getReturned()
    {
        return $this->container['returned'];
    }

    /**
     * Sets returned
     *
     * @param \DateTime|null $returned returned
     *
     * @return $this
     */
    public function setReturned($returned)
    {
        $this->container['returned'] = $returned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


