<?php
/**
 * OrderDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * OrderDetails Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'checkout_id' => 'string',
        'created_time' => '\DateTime',
        'customer_id' => 'string',
        'currency' => 'string',
        'email' => 'string',
        'locale' => 'string',
        'browser_ip' => 'string',
        'application_id' => 'string',
        'tax_identifiers' => '\DigitalRiver\ApiSdk\Model\TaxIdentifier[]',
        'invoice_attributes' => '\DigitalRiver\ApiSdk\Model\InvoiceAttributes',
        'ship_from' => '\DigitalRiver\ApiSdk\Model\ShipFrom',
        'ship_to' => '\DigitalRiver\ApiSdk\Model\Shipping',
        'bill_to' => '\DigitalRiver\ApiSdk\Model\Billing',
        'organization' => '\DigitalRiver\ApiSdk\Model\Organization',
        'subtotal' => 'double',
        'total_tax' => 'double',
        'total_importer_tax' => 'double',
        'importer_of_record_tax' => 'bool',
        'total_fees' => 'double',
        'total_duty' => 'double',
        'total_discount' => 'double',
        'total_shipping' => 'double',
        'total_amount' => 'double',
        'discount' => '\DigitalRiver\ApiSdk\Model\Discount',
        'available_to_refund_amount' => 'double',
        'refunded_amount' => 'double',
        'cancelled_amount' => 'double',
        'captured_amount' => 'double',
        'items' => '\DigitalRiver\ApiSdk\Model\OrderItem[]',
        'invoice_pd_fs' => '\DigitalRiver\ApiSdk\Model\File[]',
        'credit_memo_pd_fs' => '\DigitalRiver\ApiSdk\Model\File[]',
        'request_to_be_forgotten' => 'bool',
        'shipping_choice' => '\DigitalRiver\ApiSdk\Model\ShippingChoice',
        'state' => 'string',
        'state_transitions' => '\DigitalRiver\ApiSdk\Model\OrderStateTransitions',
        'fraud_state' => 'string',
        'fraud_state_transitions' => '\DigitalRiver\ApiSdk\Model\FraudStateTransitions',
        'live_mode' => 'bool',
        'metadata' => 'map[string,AnyType]',
        'selling_entity' => '\DigitalRiver\ApiSdk\Model\SellingEntity',
        'purchase_location' => '\DigitalRiver\ApiSdk\Model\PurchaseLocation',
        'customer_type' => '\DigitalRiver\ApiSdk\Model\CustomerType',
        'upstream_id' => 'string',
        'updated_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'checkout_id' => null,
        'created_time' => 'date-time',
        'customer_id' => null,
        'currency' => null,
        'email' => 'email',
        'locale' => null,
        'browser_ip' => null,
        'application_id' => null,
        'tax_identifiers' => null,
        'invoice_attributes' => null,
        'ship_from' => null,
        'ship_to' => null,
        'bill_to' => null,
        'organization' => null,
        'subtotal' => 'double',
        'total_tax' => 'double',
        'total_importer_tax' => 'double',
        'importer_of_record_tax' => null,
        'total_fees' => 'double',
        'total_duty' => 'double',
        'total_discount' => 'double',
        'total_shipping' => 'double',
        'total_amount' => 'double',
        'discount' => null,
        'available_to_refund_amount' => 'double',
        'refunded_amount' => 'double',
        'cancelled_amount' => 'double',
        'captured_amount' => 'double',
        'items' => null,
        'invoice_pd_fs' => null,
        'credit_memo_pd_fs' => null,
        'request_to_be_forgotten' => null,
        'shipping_choice' => null,
        'state' => null,
        'state_transitions' => null,
        'fraud_state' => null,
        'fraud_state_transitions' => null,
        'live_mode' => null,
        'metadata' => null,
        'selling_entity' => null,
        'purchase_location' => null,
        'customer_type' => null,
        'upstream_id' => null,
        'updated_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'checkout_id' => 'checkoutId',
        'created_time' => 'createdTime',
        'customer_id' => 'customerId',
        'currency' => 'currency',
        'email' => 'email',
        'locale' => 'locale',
        'browser_ip' => 'browserIp',
        'application_id' => 'applicationId',
        'tax_identifiers' => 'taxIdentifiers',
        'invoice_attributes' => 'invoiceAttributes',
        'ship_from' => 'shipFrom',
        'ship_to' => 'shipTo',
        'bill_to' => 'billTo',
        'organization' => 'organization',
        'subtotal' => 'subtotal',
        'total_tax' => 'totalTax',
        'total_importer_tax' => 'totalImporterTax',
        'importer_of_record_tax' => 'importerOfRecordTax',
        'total_fees' => 'totalFees',
        'total_duty' => 'totalDuty',
        'total_discount' => 'totalDiscount',
        'total_shipping' => 'totalShipping',
        'total_amount' => 'totalAmount',
        'discount' => 'discount',
        'available_to_refund_amount' => 'availableToRefundAmount',
        'refunded_amount' => 'refundedAmount',
        'cancelled_amount' => 'cancelledAmount',
        'captured_amount' => 'capturedAmount',
        'items' => 'items',
        'invoice_pd_fs' => 'invoicePDFs',
        'credit_memo_pd_fs' => 'creditMemoPDFs',
        'request_to_be_forgotten' => 'requestToBeForgotten',
        'shipping_choice' => 'shippingChoice',
        'state' => 'state',
        'state_transitions' => 'stateTransitions',
        'fraud_state' => 'fraudState',
        'fraud_state_transitions' => 'fraudStateTransitions',
        'live_mode' => 'liveMode',
        'metadata' => 'metadata',
        'selling_entity' => 'sellingEntity',
        'purchase_location' => 'purchaseLocation',
        'customer_type' => 'customerType',
        'upstream_id' => 'upstreamId',
        'updated_time' => 'updatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'checkout_id' => 'setCheckoutId',
        'created_time' => 'setCreatedTime',
        'customer_id' => 'setCustomerId',
        'currency' => 'setCurrency',
        'email' => 'setEmail',
        'locale' => 'setLocale',
        'browser_ip' => 'setBrowserIp',
        'application_id' => 'setApplicationId',
        'tax_identifiers' => 'setTaxIdentifiers',
        'invoice_attributes' => 'setInvoiceAttributes',
        'ship_from' => 'setShipFrom',
        'ship_to' => 'setShipTo',
        'bill_to' => 'setBillTo',
        'organization' => 'setOrganization',
        'subtotal' => 'setSubtotal',
        'total_tax' => 'setTotalTax',
        'total_importer_tax' => 'setTotalImporterTax',
        'importer_of_record_tax' => 'setImporterOfRecordTax',
        'total_fees' => 'setTotalFees',
        'total_duty' => 'setTotalDuty',
        'total_discount' => 'setTotalDiscount',
        'total_shipping' => 'setTotalShipping',
        'total_amount' => 'setTotalAmount',
        'discount' => 'setDiscount',
        'available_to_refund_amount' => 'setAvailableToRefundAmount',
        'refunded_amount' => 'setRefundedAmount',
        'cancelled_amount' => 'setCancelledAmount',
        'captured_amount' => 'setCapturedAmount',
        'items' => 'setItems',
        'invoice_pd_fs' => 'setInvoicePdFs',
        'credit_memo_pd_fs' => 'setCreditMemoPdFs',
        'request_to_be_forgotten' => 'setRequestToBeForgotten',
        'shipping_choice' => 'setShippingChoice',
        'state' => 'setState',
        'state_transitions' => 'setStateTransitions',
        'fraud_state' => 'setFraudState',
        'fraud_state_transitions' => 'setFraudStateTransitions',
        'live_mode' => 'setLiveMode',
        'metadata' => 'setMetadata',
        'selling_entity' => 'setSellingEntity',
        'purchase_location' => 'setPurchaseLocation',
        'customer_type' => 'setCustomerType',
        'upstream_id' => 'setUpstreamId',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'checkout_id' => 'getCheckoutId',
        'created_time' => 'getCreatedTime',
        'customer_id' => 'getCustomerId',
        'currency' => 'getCurrency',
        'email' => 'getEmail',
        'locale' => 'getLocale',
        'browser_ip' => 'getBrowserIp',
        'application_id' => 'getApplicationId',
        'tax_identifiers' => 'getTaxIdentifiers',
        'invoice_attributes' => 'getInvoiceAttributes',
        'ship_from' => 'getShipFrom',
        'ship_to' => 'getShipTo',
        'bill_to' => 'getBillTo',
        'organization' => 'getOrganization',
        'subtotal' => 'getSubtotal',
        'total_tax' => 'getTotalTax',
        'total_importer_tax' => 'getTotalImporterTax',
        'importer_of_record_tax' => 'getImporterOfRecordTax',
        'total_fees' => 'getTotalFees',
        'total_duty' => 'getTotalDuty',
        'total_discount' => 'getTotalDiscount',
        'total_shipping' => 'getTotalShipping',
        'total_amount' => 'getTotalAmount',
        'discount' => 'getDiscount',
        'available_to_refund_amount' => 'getAvailableToRefundAmount',
        'refunded_amount' => 'getRefundedAmount',
        'cancelled_amount' => 'getCancelledAmount',
        'captured_amount' => 'getCapturedAmount',
        'items' => 'getItems',
        'invoice_pd_fs' => 'getInvoicePdFs',
        'credit_memo_pd_fs' => 'getCreditMemoPdFs',
        'request_to_be_forgotten' => 'getRequestToBeForgotten',
        'shipping_choice' => 'getShippingChoice',
        'state' => 'getState',
        'state_transitions' => 'getStateTransitions',
        'fraud_state' => 'getFraudState',
        'fraud_state_transitions' => 'getFraudStateTransitions',
        'live_mode' => 'getLiveMode',
        'metadata' => 'getMetadata',
        'selling_entity' => 'getSellingEntity',
        'purchase_location' => 'getPurchaseLocation',
        'customer_type' => 'getCustomerType',
        'upstream_id' => 'getUpstreamId',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE_ACCEPTED = 'accepted';
    const STATE_BLOCKED = 'blocked';
    const STATE_PENDING_PAYMENT = 'pending_payment';
    const STATE_IN_REVIEW = 'in_review';
    const STATE_DISPUTE = 'dispute';
    const STATE_CANCELLED = 'cancelled';
    const STATE_FULFILLED = 'fulfilled';
    const STATE_COMPLETE = 'complete';
    const STATE_RETURNED = 'returned';
    const FRAUD_STATE_BLOCKED = 'blocked';
    const FRAUD_STATE_REVIEW_OPENED = 'review_opened';
    const FRAUD_STATE_PASSED = 'passed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
       $allowable = [
            self::STATE_ACCEPTED,
            self::STATE_BLOCKED,
            self::STATE_PENDING_PAYMENT,
            self::STATE_IN_REVIEW,
            self::STATE_DISPUTE,
            self::STATE_CANCELLED,
            self::STATE_FULFILLED,
            self::STATE_COMPLETE,
            self::STATE_RETURNED,
        ];

        $allowableAllCase = array_unique(array_merge(array_map('strtolower', $allowable), $allowable));
        return $allowableAllCase;
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFraudStateAllowableValues()
    {
       $allowable = [
            self::FRAUD_STATE_BLOCKED,
            self::FRAUD_STATE_REVIEW_OPENED,
            self::FRAUD_STATE_PASSED,
        ];

        $allowableAllCase = array_unique(array_merge(array_map('strtolower', $allowable), $allowable));
        return $allowableAllCase;
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['checkout_id'] = isset($data['checkout_id']) ? $data['checkout_id'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['browser_ip'] = isset($data['browser_ip']) ? $data['browser_ip'] : null;
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
        $this->container['tax_identifiers'] = isset($data['tax_identifiers']) ? $data['tax_identifiers'] : null;
        $this->container['invoice_attributes'] = isset($data['invoice_attributes']) ? $data['invoice_attributes'] : null;
        $this->container['ship_from'] = isset($data['ship_from']) ? $data['ship_from'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total_importer_tax'] = isset($data['total_importer_tax']) ? $data['total_importer_tax'] : null;
        $this->container['importer_of_record_tax'] = isset($data['importer_of_record_tax']) ? $data['importer_of_record_tax'] : null;
        $this->container['total_fees'] = isset($data['total_fees']) ? $data['total_fees'] : null;
        $this->container['total_duty'] = isset($data['total_duty']) ? $data['total_duty'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['total_shipping'] = isset($data['total_shipping']) ? $data['total_shipping'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['available_to_refund_amount'] = isset($data['available_to_refund_amount']) ? $data['available_to_refund_amount'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['cancelled_amount'] = isset($data['cancelled_amount']) ? $data['cancelled_amount'] : null;
        $this->container['captured_amount'] = isset($data['captured_amount']) ? $data['captured_amount'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['invoice_pd_fs'] = isset($data['invoice_pd_fs']) ? $data['invoice_pd_fs'] : null;
        $this->container['credit_memo_pd_fs'] = isset($data['credit_memo_pd_fs']) ? $data['credit_memo_pd_fs'] : null;
        $this->container['request_to_be_forgotten'] = isset($data['request_to_be_forgotten']) ? $data['request_to_be_forgotten'] : false;
        $this->container['shipping_choice'] = isset($data['shipping_choice']) ? $data['shipping_choice'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_transitions'] = isset($data['state_transitions']) ? $data['state_transitions'] : null;
        $this->container['fraud_state'] = isset($data['fraud_state']) ? $data['fraud_state'] : null;
        $this->container['fraud_state_transitions'] = isset($data['fraud_state_transitions']) ? $data['fraud_state_transitions'] : null;
        $this->container['live_mode'] = isset($data['live_mode']) ? $data['live_mode'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['selling_entity'] = isset($data['selling_entity']) ? $data['selling_entity'] : null;
        $this->container['purchase_location'] = isset($data['purchase_location']) ? $data['purchase_location'] : null;
        $this->container['customer_type'] = isset($data['customer_type']) ? $data['customer_type'] : null;
        $this->container['upstream_id'] = isset($data['upstream_id']) ? $data['upstream_id'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
       
        if (!is_null($this->container['state']) && !in_array(strtolower($this->container['state']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFraudStateAllowableValues();
       
        if (!is_null($this->container['fraud_state']) && !in_array(strtolower($this->container['fraud_state']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fraud_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the order.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets checkout_id
     *
     * @return string|null
     */
    public function getCheckoutId()
    {
        return $this->container['checkout_id'];
    }

    /**
     * Sets checkout_id
     *
     * @param string|null $checkout_id The unique identifier of the checkout submitted to create the order.
     *
     * @return $this
     */
    public function setCheckoutId($checkout_id)
    {
        $this->container['checkout_id'] = $checkout_id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time Time at which the order was created.
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id The identifier of the customer associated with this order.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency A three-letter ISO currency code.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The customer's email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets browser_ip
     *
     * @return string|null
     */
    public function getBrowserIp()
    {
        return $this->container['browser_ip'];
    }

    /**
     * Sets browser_ip
     *
     * @param string|null $browser_ip The IP address of the browser used by the customer when placing the order.
     *
     * @return $this
     */
    public function setBrowserIp($browser_ip)
    {
        $this->container['browser_ip'] = $browser_ip;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id An arbitrary string identifier that can be used to track the application type.
     *
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets tax_identifiers
     *
     * @return \DigitalRiver\ApiSdk\Model\TaxIdentifier[]|null
     */
    public function getTaxIdentifiers()
    {
        return $this->container['tax_identifiers'];
    }

    /**
     * Sets tax_identifiers
     *
     * @param \DigitalRiver\ApiSdk\Model\TaxIdentifier[]|null $tax_identifiers A list of the tax identifiers applied to this order.
     *
     * @return $this
     */
    public function setTaxIdentifiers($tax_identifiers)
    {
        $this->container['tax_identifiers'] = $tax_identifiers;

        return $this;
    }

    /**
     * Gets invoice_attributes
     *
     * @return \DigitalRiver\ApiSdk\Model\InvoiceAttributes|null
     */
    public function getInvoiceAttributes()
    {
        return $this->container['invoice_attributes'];
    }

    /**
     * Sets invoice_attributes
     *
     * @param \DigitalRiver\ApiSdk\Model\InvoiceAttributes|null $invoice_attributes invoice_attributes
     *
     * @return $this
     */
    public function setInvoiceAttributes($invoice_attributes)
    {
        $this->container['invoice_attributes'] = $invoice_attributes;

        return $this;
    }

    /**
     * Gets ship_from
     *
     * @return \DigitalRiver\ApiSdk\Model\ShipFrom|null
     */
    public function getShipFrom()
    {
        return $this->container['ship_from'];
    }

    /**
     * Sets ship_from
     *
     * @param \DigitalRiver\ApiSdk\Model\ShipFrom|null $ship_from ship_from
     *
     * @return $this
     */
    public function setShipFrom($ship_from)
    {
        $this->container['ship_from'] = $ship_from;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \DigitalRiver\ApiSdk\Model\Shipping|null
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \DigitalRiver\ApiSdk\Model\Shipping|null $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets bill_to
     *
     * @return \DigitalRiver\ApiSdk\Model\Billing|null
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     *
     * @param \DigitalRiver\ApiSdk\Model\Billing|null $bill_to bill_to
     *
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \DigitalRiver\ApiSdk\Model\Organization|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \DigitalRiver\ApiSdk\Model\Organization|null $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return double|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param double|null $subtotal Represents the total order amount exclusive of tax.
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return double|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param double|null $total_tax Represents the total tax amount.
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_importer_tax
     *
     * @return double|null
     */
    public function getTotalImporterTax()
    {
        return $this->container['total_importer_tax'];
    }

    /**
     * Sets total_importer_tax
     *
     * @param double|null $total_importer_tax Represents the total tax amount from the importer of record.
     *
     * @return $this
     */
    public function setTotalImporterTax($total_importer_tax)
    {
        $this->container['total_importer_tax'] = $total_importer_tax;

        return $this;
    }

    /**
     * Gets importer_of_record_tax
     *
     * @return bool|null
     */
    public function getImporterOfRecordTax()
    {
        return $this->container['importer_of_record_tax'];
    }

    /**
     * Sets importer_of_record_tax
     *
     * @param bool|null $importer_of_record_tax If <code>true</code>, indicates that the tax amount is paid by the importer of record.
     *
     * @return $this
     */
    public function setImporterOfRecordTax($importer_of_record_tax)
    {
        $this->container['importer_of_record_tax'] = $importer_of_record_tax;

        return $this;
    }

    /**
     * Gets total_fees
     *
     * @return double|null
     */
    public function getTotalFees()
    {
        return $this->container['total_fees'];
    }

    /**
     * Sets total_fees
     *
     * @param double|null $total_fees Represents the total fee amount.
     *
     * @return $this
     */
    public function setTotalFees($total_fees)
    {
        $this->container['total_fees'] = $total_fees;

        return $this;
    }

    /**
     * Gets total_duty
     *
     * @return double|null
     */
    public function getTotalDuty()
    {
        return $this->container['total_duty'];
    }

    /**
     * Sets total_duty
     *
     * @param double|null $total_duty Represents the total duty amount.
     *
     * @return $this
     */
    public function setTotalDuty($total_duty)
    {
        $this->container['total_duty'] = $total_duty;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return double|null
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param double|null $total_discount Represents the total discount amount.
     *
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_shipping
     *
     * @return double|null
     */
    public function getTotalShipping()
    {
        return $this->container['total_shipping'];
    }

    /**
     * Sets total_shipping
     *
     * @param double|null $total_shipping Represents the total shipping amount.
     *
     * @return $this
     */
    public function setTotalShipping($total_shipping)
    {
        $this->container['total_shipping'] = $total_shipping;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double|null $total_amount Represents the total charge amount.
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \DigitalRiver\ApiSdk\Model\Discount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \DigitalRiver\ApiSdk\Model\Discount|null $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets available_to_refund_amount
     *
     * @return double|null
     */
    public function getAvailableToRefundAmount()
    {
        return $this->container['available_to_refund_amount'];
    }

    /**
     * Sets available_to_refund_amount
     *
     * @param double|null $available_to_refund_amount The available to refund amount at the order-level.
     *
     * @return $this
     */
    public function setAvailableToRefundAmount($available_to_refund_amount)
    {
        $this->container['available_to_refund_amount'] = $available_to_refund_amount;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return double|null
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param double|null $refunded_amount Represents the total payment amount refunded.
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets cancelled_amount
     *
     * @return double|null
     */
    public function getCancelledAmount()
    {
        return $this->container['cancelled_amount'];
    }

    /**
     * Sets cancelled_amount
     *
     * @param double|null $cancelled_amount Represents the total payment amount cancelled.
     *
     * @return $this
     */
    public function setCancelledAmount($cancelled_amount)
    {
        $this->container['cancelled_amount'] = $cancelled_amount;

        return $this;
    }

    /**
     * Gets captured_amount
     *
     * @return double|null
     */
    public function getCapturedAmount()
    {
        return $this->container['captured_amount'];
    }

    /**
     * Sets captured_amount
     *
     * @param double|null $captured_amount Represents the total payment amount captured.
     *
     * @return $this
     */
    public function setCapturedAmount($captured_amount)
    {
        $this->container['captured_amount'] = $captured_amount;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \DigitalRiver\ApiSdk\Model\OrderItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \DigitalRiver\ApiSdk\Model\OrderItem[]|null $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets invoice_pd_fs
     *
     * @return \DigitalRiver\ApiSdk\Model\File[]|null
     */
    public function getInvoicePdFs()
    {
        return $this->container['invoice_pd_fs'];
    }

    /**
     * Sets invoice_pd_fs
     *
     * @param \DigitalRiver\ApiSdk\Model\File[]|null $invoice_pd_fs An array of links to downloadable PDF invoices. If no invoices exist yet, the array is null.
     *
     * @return $this
     */
    public function setInvoicePdFs($invoice_pd_fs)
    {
        $this->container['invoice_pd_fs'] = $invoice_pd_fs;

        return $this;
    }

    /**
     * Gets credit_memo_pd_fs
     *
     * @return \DigitalRiver\ApiSdk\Model\File[]|null
     */
    public function getCreditMemoPdFs()
    {
        return $this->container['credit_memo_pd_fs'];
    }

    /**
     * Sets credit_memo_pd_fs
     *
     * @param \DigitalRiver\ApiSdk\Model\File[]|null $credit_memo_pd_fs An array of links to downloadable PDF credit memos. If no credit memos exist yet, the array is null.
     *
     * @return $this
     */
    public function setCreditMemoPdFs($credit_memo_pd_fs)
    {
        $this->container['credit_memo_pd_fs'] = $credit_memo_pd_fs;

        return $this;
    }

    /**
     * Gets request_to_be_forgotten
     *
     * @return bool|null
     */
    public function getRequestToBeForgotten()
    {
        return $this->container['request_to_be_forgotten'];
    }

    /**
     * Sets request_to_be_forgotten
     *
     * @param bool|null $request_to_be_forgotten If <code>true</code> indicates a user placing an order has requested this order be forgotten.
     *
     * @return $this
     */
    public function setRequestToBeForgotten($request_to_be_forgotten)
    {
        $this->container['request_to_be_forgotten'] = $request_to_be_forgotten;

        return $this;
    }

    /**
     * Gets shipping_choice
     *
     * @return \DigitalRiver\ApiSdk\Model\ShippingChoice|null
     */
    public function getShippingChoice()
    {
        return $this->container['shipping_choice'];
    }

    /**
     * Sets shipping_choice
     *
     * @param \DigitalRiver\ApiSdk\Model\ShippingChoice|null $shipping_choice shipping_choice
     *
     * @return $this
     */
    public function setShippingChoice($shipping_choice)
    {
        $this->container['shipping_choice'] = $shipping_choice;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The current order state.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array(strtolower($state), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_transitions
     *
     * @return \DigitalRiver\ApiSdk\Model\OrderStateTransitions|null
     */
    public function getStateTransitions()
    {
        return $this->container['state_transitions'];
    }

    /**
     * Sets state_transitions
     *
     * @param \DigitalRiver\ApiSdk\Model\OrderStateTransitions|null $state_transitions state_transitions
     *
     * @return $this
     */
    public function setStateTransitions($state_transitions)
    {
        $this->container['state_transitions'] = $state_transitions;

        return $this;
    }

    /**
     * Gets fraud_state
     *
     * @return string|null
     */
    public function getFraudState()
    {
        return $this->container['fraud_state'];
    }

    /**
     * Sets fraud_state
     *
     * @param string|null $fraud_state The fraud review state.
     *
     * @return $this
     */
    public function setFraudState($fraud_state)
    {
        $allowedValues = $this->getFraudStateAllowableValues();
        if (!is_null($fraud_state) && !in_array(strtolower($fraud_state), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fraud_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fraud_state'] = $fraud_state;

        return $this;
    }

    /**
     * Gets fraud_state_transitions
     *
     * @return \DigitalRiver\ApiSdk\Model\FraudStateTransitions|null
     */
    public function getFraudStateTransitions()
    {
        return $this->container['fraud_state_transitions'];
    }

    /**
     * Sets fraud_state_transitions
     *
     * @param \DigitalRiver\ApiSdk\Model\FraudStateTransitions|null $fraud_state_transitions fraud_state_transitions
     *
     * @return $this
     */
    public function setFraudStateTransitions($fraud_state_transitions)
    {
        $this->container['fraud_state_transitions'] = $fraud_state_transitions;

        return $this;
    }

    /**
     * Gets live_mode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['live_mode'];
    }

    /**
     * Sets live_mode
     *
     * @param bool|null $live_mode Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.
     *
     * @return $this
     */
    public function setLiveMode($live_mode)
    {
        $this->container['live_mode'] = $live_mode;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,AnyType]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,AnyType]|null $metadata Key-value pairs used to store additional data. Value can be string, boolean or integer types.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets selling_entity
     *
     * @return \DigitalRiver\ApiSdk\Model\SellingEntity|null
     */
    public function getSellingEntity()
    {
        return $this->container['selling_entity'];
    }

    /**
     * Sets selling_entity
     *
     * @param \DigitalRiver\ApiSdk\Model\SellingEntity|null $selling_entity selling_entity
     *
     * @return $this
     */
    public function setSellingEntity($selling_entity)
    {
        $this->container['selling_entity'] = $selling_entity;

        return $this;
    }

    /**
     * Gets purchase_location
     *
     * @return \DigitalRiver\ApiSdk\Model\PurchaseLocation|null
     */
    public function getPurchaseLocation()
    {
        return $this->container['purchase_location'];
    }

    /**
     * Sets purchase_location
     *
     * @param \DigitalRiver\ApiSdk\Model\PurchaseLocation|null $purchase_location purchase_location
     *
     * @return $this
     */
    public function setPurchaseLocation($purchase_location)
    {
        $this->container['purchase_location'] = $purchase_location;

        return $this;
    }

    /**
     * Gets customer_type
     *
     * @return \DigitalRiver\ApiSdk\Model\CustomerType|null
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param \DigitalRiver\ApiSdk\Model\CustomerType|null $customer_type customer_type
     *
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets upstream_id
     *
     * @return string|null
     */
    public function getUpstreamId()
    {
        return $this->container['upstream_id'];
    }

    /**
     * Sets upstream_id
     *
     * @param string|null $upstream_id The upstream identifier.
     *
     * @return $this
     */
    public function setUpstreamId($upstream_id)
    {
        $this->container['upstream_id'] = $upstream_id;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time Time at which the order was created.
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


