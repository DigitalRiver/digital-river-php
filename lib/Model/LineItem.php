<?php
/**
 * LineItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * LineItem Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'upstream_id' => 'string',
        'inventory_item_id' => 'string',
        'subtotal' => 'double',
        'total' => 'double',
        'name' => 'string',
        'quantity' => 'int',
        'pending' => 'int',
        'backordered' => 'int',
        'shipped' => 'int',
        'cancelled' => 'int',
        'returned' => 'int',
        'gift_message' => 'string',
        'gift_wrap' => 'bool',
        'tax' => '\DigitalRiver\ApiSdk\Model\GlobalFulfillmentTax',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'integer',
        'upstream_id' => null,
        'inventory_item_id' => null,
        'subtotal' => 'double',
        'total' => 'double',
        'name' => null,
        'quantity' => null,
        'pending' => null,
        'backordered' => null,
        'shipped' => null,
        'cancelled' => null,
        'returned' => null,
        'gift_message' => null,
        'gift_wrap' => null,
        'tax' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'upstream_id' => 'upstreamId',
        'inventory_item_id' => 'inventoryItemId',
        'subtotal' => 'subtotal',
        'total' => 'total',
        'name' => 'name',
        'quantity' => 'quantity',
        'pending' => 'pending',
        'backordered' => 'backordered',
        'shipped' => 'shipped',
        'cancelled' => 'cancelled',
        'returned' => 'returned',
        'gift_message' => 'giftMessage',
        'gift_wrap' => 'giftWrap',
        'tax' => 'tax',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'upstream_id' => 'setUpstreamId',
        'inventory_item_id' => 'setInventoryItemId',
        'subtotal' => 'setSubtotal',
        'total' => 'setTotal',
        'name' => 'setName',
        'quantity' => 'setQuantity',
        'pending' => 'setPending',
        'backordered' => 'setBackordered',
        'shipped' => 'setShipped',
        'cancelled' => 'setCancelled',
        'returned' => 'setReturned',
        'gift_message' => 'setGiftMessage',
        'gift_wrap' => 'setGiftWrap',
        'tax' => 'setTax',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'upstream_id' => 'getUpstreamId',
        'inventory_item_id' => 'getInventoryItemId',
        'subtotal' => 'getSubtotal',
        'total' => 'getTotal',
        'name' => 'getName',
        'quantity' => 'getQuantity',
        'pending' => 'getPending',
        'backordered' => 'getBackordered',
        'shipped' => 'getShipped',
        'cancelled' => 'getCancelled',
        'returned' => 'getReturned',
        'gift_message' => 'getGiftMessage',
        'gift_wrap' => 'getGiftWrap',
        'tax' => 'getTax',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE_PENDING = 'pending';
    const STATE_BACKORDERED = 'backordered';
    const STATE_CANCELLED = 'cancelled';
    const STATE_SHIPPED = 'shipped';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
       $allowable = [
            self::STATE_PENDING,
            self::STATE_BACKORDERED,
            self::STATE_CANCELLED,
            self::STATE_SHIPPED,
        ];

        $allowableAllCase = array_unique(array_merge(array_map('strtolower', $allowable), $allowable));
        return $allowableAllCase;
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['upstream_id'] = isset($data['upstream_id']) ? $data['upstream_id'] : null;
        $this->container['inventory_item_id'] = isset($data['inventory_item_id']) ? $data['inventory_item_id'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['backordered'] = isset($data['backordered']) ? $data['backordered'] : null;
        $this->container['shipped'] = isset($data['shipped']) ? $data['shipped'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
        $this->container['returned'] = isset($data['returned']) ? $data['returned'] : null;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
        $this->container['gift_wrap'] = isset($data['gift_wrap']) ? $data['gift_wrap'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
       
        if (!is_null($this->container['state']) && !in_array(strtolower($this->container['state']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets upstream_id
     *
     * @return string|null
     */
    public function getUpstreamId()
    {
        return $this->container['upstream_id'];
    }

    /**
     * Sets upstream_id
     *
     * @param string|null $upstream_id The upstream line item identifier.
     *
     * @return $this
     */
    public function setUpstreamId($upstream_id)
    {
        $this->container['upstream_id'] = $upstream_id;

        return $this;
    }

    /**
     * Gets inventory_item_id
     *
     * @return string|null
     */
    public function getInventoryItemId()
    {
        return $this->container['inventory_item_id'];
    }

    /**
     * Sets inventory_item_id
     *
     * @param string|null $inventory_item_id The inventory item identifier.
     *
     * @return $this
     */
    public function setInventoryItemId($inventory_item_id)
    {
        $this->container['inventory_item_id'] = $inventory_item_id;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return double|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param double|null $subtotal .
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double|null $total The aggregate price of the product inclusive of taxes, discounts, fees, shipping, handling and duties.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The product name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The item quantity.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return int|null
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param int|null $pending The pending shipment quantity.
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets backordered
     *
     * @return int|null
     */
    public function getBackordered()
    {
        return $this->container['backordered'];
    }

    /**
     * Sets backordered
     *
     * @param int|null $backordered The backordered quantity.
     *
     * @return $this
     */
    public function setBackordered($backordered)
    {
        $this->container['backordered'] = $backordered;

        return $this;
    }

    /**
     * Gets shipped
     *
     * @return int|null
     */
    public function getShipped()
    {
        return $this->container['shipped'];
    }

    /**
     * Sets shipped
     *
     * @param int|null $shipped The shipped quantity.
     *
     * @return $this
     */
    public function setShipped($shipped)
    {
        $this->container['shipped'] = $shipped;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return int|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param int|null $cancelled The cancelled quantity.
     *
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets returned
     *
     * @return int|null
     */
    public function getReturned()
    {
        return $this->container['returned'];
    }

    /**
     * Sets returned
     *
     * @param int|null $returned The returned quantity.
     *
     * @return $this
     */
    public function setReturned($returned)
    {
        $this->container['returned'] = $returned;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string|null
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string|null $gift_message The gift message on the package of the product.
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }

    /**
     * Gets gift_wrap
     *
     * @return bool|null
     */
    public function getGiftWrap()
    {
        return $this->container['gift_wrap'];
    }

    /**
     * Sets gift_wrap
     *
     * @param bool|null $gift_wrap Has the value true if the item should be gift wrapped.
     *
     * @return $this
     */
    public function setGiftWrap($gift_wrap)
    {
        $this->container['gift_wrap'] = $gift_wrap;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \DigitalRiver\ApiSdk\Model\GlobalFulfillmentTax|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \DigitalRiver\ApiSdk\Model\GlobalFulfillmentTax|null $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Current line item state.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array(strtolower($state), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


