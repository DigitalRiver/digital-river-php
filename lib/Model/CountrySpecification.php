<?php
/**
 * CountrySpecification
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * CountrySpecification Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CountrySpecification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CountrySpecification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'selling_entity' => 'string',
        'billing_address_schema' => 'string',
        'shipping_address_schema' => 'string',
        'billing_address_only_schema' => 'string',
        'individual_tax_identifiers_schemas' => 'string[]',
        'business_tax_identifiers_schemas' => 'string[]',
        'live_mode' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'country' => null,
        'selling_entity' => null,
        'billing_address_schema' => null,
        'shipping_address_schema' => null,
        'billing_address_only_schema' => null,
        'individual_tax_identifiers_schemas' => null,
        'business_tax_identifiers_schemas' => null,
        'live_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'selling_entity' => 'sellingEntity',
        'billing_address_schema' => 'billingAddressSchema',
        'shipping_address_schema' => 'shippingAddressSchema',
        'billing_address_only_schema' => 'billingAddressOnlySchema',
        'individual_tax_identifiers_schemas' => 'individualTaxIdentifiersSchemas',
        'business_tax_identifiers_schemas' => 'businessTaxIdentifiersSchemas',
        'live_mode' => 'liveMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'selling_entity' => 'setSellingEntity',
        'billing_address_schema' => 'setBillingAddressSchema',
        'shipping_address_schema' => 'setShippingAddressSchema',
        'billing_address_only_schema' => 'setBillingAddressOnlySchema',
        'individual_tax_identifiers_schemas' => 'setIndividualTaxIdentifiersSchemas',
        'business_tax_identifiers_schemas' => 'setBusinessTaxIdentifiersSchemas',
        'live_mode' => 'setLiveMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'selling_entity' => 'getSellingEntity',
        'billing_address_schema' => 'getBillingAddressSchema',
        'shipping_address_schema' => 'getShippingAddressSchema',
        'billing_address_only_schema' => 'getBillingAddressOnlySchema',
        'individual_tax_identifiers_schemas' => 'getIndividualTaxIdentifiersSchemas',
        'business_tax_identifiers_schemas' => 'getBusinessTaxIdentifiersSchemas',
        'live_mode' => 'getLiveMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['selling_entity'] = isset($data['selling_entity']) ? $data['selling_entity'] : null;
        $this->container['billing_address_schema'] = isset($data['billing_address_schema']) ? $data['billing_address_schema'] : null;
        $this->container['shipping_address_schema'] = isset($data['shipping_address_schema']) ? $data['shipping_address_schema'] : null;
        $this->container['billing_address_only_schema'] = isset($data['billing_address_only_schema']) ? $data['billing_address_only_schema'] : null;
        $this->container['individual_tax_identifiers_schemas'] = isset($data['individual_tax_identifiers_schemas']) ? $data['individual_tax_identifiers_schemas'] : null;
        $this->container['business_tax_identifiers_schemas'] = isset($data['business_tax_identifiers_schemas']) ? $data['business_tax_identifiers_schemas'] : null;
        $this->container['live_mode'] = isset($data['live_mode']) ? $data['live_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country An ISO 3166-1 alpha-2 country code.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets selling_entity
     *
     * @return string|null
     */
    public function getSellingEntity()
    {
        return $this->container['selling_entity'];
    }

    /**
     * Sets selling_entity
     *
     * @param string|null $selling_entity A Digital River selling entity.
     *
     * @return $this
     */
    public function setSellingEntity($selling_entity)
    {
        $this->container['selling_entity'] = $selling_entity;

        return $this;
    }

    /**
     * Gets billing_address_schema
     *
     * @return string|null
     */
    public function getBillingAddressSchema()
    {
        return $this->container['billing_address_schema'];
    }

    /**
     * Sets billing_address_schema
     *
     * @param string|null $billing_address_schema A billing address schema.
     *
     * @return $this
     */
    public function setBillingAddressSchema($billing_address_schema)
    {
        $this->container['billing_address_schema'] = $billing_address_schema;

        return $this;
    }

    /**
     * Gets shipping_address_schema
     *
     * @return string|null
     */
    public function getShippingAddressSchema()
    {
        return $this->container['shipping_address_schema'];
    }

    /**
     * Sets shipping_address_schema
     *
     * @param string|null $shipping_address_schema A ship to address schema.
     *
     * @return $this
     */
    public function setShippingAddressSchema($shipping_address_schema)
    {
        $this->container['shipping_address_schema'] = $shipping_address_schema;

        return $this;
    }

    /**
     * Gets billing_address_only_schema
     *
     * @return string|null
     */
    public function getBillingAddressOnlySchema()
    {
        return $this->container['billing_address_only_schema'];
    }

    /**
     * Sets billing_address_only_schema
     *
     * @param string|null $billing_address_only_schema A billing address only schema.
     *
     * @return $this
     */
    public function setBillingAddressOnlySchema($billing_address_only_schema)
    {
        $this->container['billing_address_only_schema'] = $billing_address_only_schema;

        return $this;
    }

    /**
     * Gets individual_tax_identifiers_schemas
     *
     * @return string[]|null
     */
    public function getIndividualTaxIdentifiersSchemas()
    {
        return $this->container['individual_tax_identifiers_schemas'];
    }

    /**
     * Sets individual_tax_identifiers_schemas
     *
     * @param string[]|null $individual_tax_identifiers_schemas individual_tax_identifiers_schemas
     *
     * @return $this
     */
    public function setIndividualTaxIdentifiersSchemas($individual_tax_identifiers_schemas)
    {
        $this->container['individual_tax_identifiers_schemas'] = $individual_tax_identifiers_schemas;

        return $this;
    }

    /**
     * Gets business_tax_identifiers_schemas
     *
     * @return string[]|null
     */
    public function getBusinessTaxIdentifiersSchemas()
    {
        return $this->container['business_tax_identifiers_schemas'];
    }

    /**
     * Sets business_tax_identifiers_schemas
     *
     * @param string[]|null $business_tax_identifiers_schemas business_tax_identifiers_schemas
     *
     * @return $this
     */
    public function setBusinessTaxIdentifiersSchemas($business_tax_identifiers_schemas)
    {
        $this->container['business_tax_identifiers_schemas'] = $business_tax_identifiers_schemas;

        return $this;
    }

    /**
     * Gets live_mode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['live_mode'];
    }

    /**
     * Sets live_mode
     *
     * @param bool|null $live_mode Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.
     *
     * @return $this
     */
    public function setLiveMode($live_mode)
    {
        $this->container['live_mode'] = $live_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


