<?php
/**
 * ShipmentItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * ShipmentItem Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'fulfillment_order_item_id' => 'string',
        'fulfillment_order_item_upstream_id' => 'string',
        'inventory_item_id' => 'string',
        'part_number' => 'string',
        'quantity' => 'float',
        'tracking_urls' => '\DigitalRiver\ApiSdk\Model\Tracking[]',
        'unit_attributes' => '\DigitalRiver\ApiSdk\Model\ShipmentUnitAttributes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'fulfillment_order_item_id' => null,
        'fulfillment_order_item_upstream_id' => null,
        'inventory_item_id' => null,
        'part_number' => null,
        'quantity' => 'integer',
        'tracking_urls' => null,
        'unit_attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fulfillment_order_item_id' => 'fulfillmentOrderItemId',
        'fulfillment_order_item_upstream_id' => 'fulfillmentOrderItemUpstreamId',
        'inventory_item_id' => 'inventoryItemId',
        'part_number' => 'partNumber',
        'quantity' => 'quantity',
        'tracking_urls' => 'trackingUrls',
        'unit_attributes' => 'unitAttributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fulfillment_order_item_id' => 'setFulfillmentOrderItemId',
        'fulfillment_order_item_upstream_id' => 'setFulfillmentOrderItemUpstreamId',
        'inventory_item_id' => 'setInventoryItemId',
        'part_number' => 'setPartNumber',
        'quantity' => 'setQuantity',
        'tracking_urls' => 'setTrackingUrls',
        'unit_attributes' => 'setUnitAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fulfillment_order_item_id' => 'getFulfillmentOrderItemId',
        'fulfillment_order_item_upstream_id' => 'getFulfillmentOrderItemUpstreamId',
        'inventory_item_id' => 'getInventoryItemId',
        'part_number' => 'getPartNumber',
        'quantity' => 'getQuantity',
        'tracking_urls' => 'getTrackingUrls',
        'unit_attributes' => 'getUnitAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['fulfillment_order_item_id'] = isset($data['fulfillment_order_item_id']) ? $data['fulfillment_order_item_id'] : null;
        $this->container['fulfillment_order_item_upstream_id'] = isset($data['fulfillment_order_item_upstream_id']) ? $data['fulfillment_order_item_upstream_id'] : null;
        $this->container['inventory_item_id'] = isset($data['inventory_item_id']) ? $data['inventory_item_id'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['tracking_urls'] = isset($data['tracking_urls']) ? $data['tracking_urls'] : null;
        $this->container['unit_attributes'] = isset($data['unit_attributes']) ? $data['unit_attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of a shipment item.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fulfillment_order_item_id
     *
     * @return string|null
     */
    public function getFulfillmentOrderItemId()
    {
        return $this->container['fulfillment_order_item_id'];
    }

    /**
     * Sets fulfillment_order_item_id
     *
     * @param string|null $fulfillment_order_item_id The identifier of the line item.
     *
     * @return $this
     */
    public function setFulfillmentOrderItemId($fulfillment_order_item_id)
    {
        $this->container['fulfillment_order_item_id'] = $fulfillment_order_item_id;

        return $this;
    }

    /**
     * Gets fulfillment_order_item_upstream_id
     *
     * @return string|null
     */
    public function getFulfillmentOrderItemUpstreamId()
    {
        return $this->container['fulfillment_order_item_upstream_id'];
    }

    /**
     * Sets fulfillment_order_item_upstream_id
     *
     * @param string|null $fulfillment_order_item_upstream_id The upstream identifier of the line item.
     *
     * @return $this
     */
    public function setFulfillmentOrderItemUpstreamId($fulfillment_order_item_upstream_id)
    {
        $this->container['fulfillment_order_item_upstream_id'] = $fulfillment_order_item_upstream_id;

        return $this;
    }

    /**
     * Gets inventory_item_id
     *
     * @return string|null
     */
    public function getInventoryItemId()
    {
        return $this->container['inventory_item_id'];
    }

    /**
     * Sets inventory_item_id
     *
     * @param string|null $inventory_item_id The identifier of the inventory item.
     *
     * @return $this
     */
    public function setInventoryItemId($inventory_item_id)
    {
        $this->container['inventory_item_id'] = $inventory_item_id;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number The manufacturer part number.
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The quantity of this item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tracking_urls
     *
     * @return \DigitalRiver\ApiSdk\Model\Tracking[]|null
     */
    public function getTrackingUrls()
    {
        return $this->container['tracking_urls'];
    }

    /**
     * Sets tracking_urls
     *
     * @param \DigitalRiver\ApiSdk\Model\Tracking[]|null $tracking_urls tracking_urls
     *
     * @return $this
     */
    public function setTrackingUrls($tracking_urls)
    {
        $this->container['tracking_urls'] = $tracking_urls;

        return $this;
    }

    /**
     * Gets unit_attributes
     *
     * @return \DigitalRiver\ApiSdk\Model\ShipmentUnitAttributes[]|null
     */
    public function getUnitAttributes()
    {
        return $this->container['unit_attributes'];
    }

    /**
     * Sets unit_attributes
     *
     * @param \DigitalRiver\ApiSdk\Model\ShipmentUnitAttributes[]|null $unit_attributes unit_attributes
     *
     * @return $this
     */
    public function setUnitAttributes($unit_attributes)
    {
        $this->container['unit_attributes'] = $unit_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


