<?php
/**
 * Fee
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * Fee Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Fee implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Fee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_time' => '\DateTime',
        'type' => 'string',
        'sku_id' => 'string',
        'category' => 'string',
        'value' => 'string',
        'amount' => 'double',
        'battery' => '\DigitalRiver\ApiSdk\Model\Battery',
        'compliance_agency' => 'string',
        'fee_exemption' => 'string',
        'brand_name' => 'string',
        'weee' => '\DigitalRiver\ApiSdk\Model\WEEE',
        'weight_and_units' => 'string',
        'rate_and_units' => 'string',
        'currency' => 'string',
        'country' => 'string',
        'subdivisions' => 'string[]',
        'live_mode' => 'bool',
        'metadata' => 'map[string,AnyType]',
        'updated_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_time' => 'date-time',
        'type' => null,
        'sku_id' => null,
        'category' => null,
        'value' => null,
        'amount' => 'double',
        'battery' => null,
        'compliance_agency' => null,
        'fee_exemption' => null,
        'brand_name' => null,
        'weee' => null,
        'weight_and_units' => null,
        'rate_and_units' => null,
        'currency' => null,
        'country' => null,
        'subdivisions' => null,
        'live_mode' => null,
        'metadata' => null,
        'updated_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_time' => 'createdTime',
        'type' => 'type',
        'sku_id' => 'skuId',
        'category' => 'category',
        'value' => 'value',
        'amount' => 'amount',
        'battery' => 'battery',
        'compliance_agency' => 'complianceAgency',
        'fee_exemption' => 'feeExemption',
        'brand_name' => 'brandName',
        'weee' => 'weee',
        'weight_and_units' => 'weightAndUnits',
        'rate_and_units' => 'rateAndUnits',
        'currency' => 'currency',
        'country' => 'country',
        'subdivisions' => 'subdivisions',
        'live_mode' => 'liveMode',
        'metadata' => 'metadata',
        'updated_time' => 'updatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_time' => 'setCreatedTime',
        'type' => 'setType',
        'sku_id' => 'setSkuId',
        'category' => 'setCategory',
        'value' => 'setValue',
        'amount' => 'setAmount',
        'battery' => 'setBattery',
        'compliance_agency' => 'setComplianceAgency',
        'fee_exemption' => 'setFeeExemption',
        'brand_name' => 'setBrandName',
        'weee' => 'setWeee',
        'weight_and_units' => 'setWeightAndUnits',
        'rate_and_units' => 'setRateAndUnits',
        'currency' => 'setCurrency',
        'country' => 'setCountry',
        'subdivisions' => 'setSubdivisions',
        'live_mode' => 'setLiveMode',
        'metadata' => 'setMetadata',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_time' => 'getCreatedTime',
        'type' => 'getType',
        'sku_id' => 'getSkuId',
        'category' => 'getCategory',
        'value' => 'getValue',
        'amount' => 'getAmount',
        'battery' => 'getBattery',
        'compliance_agency' => 'getComplianceAgency',
        'fee_exemption' => 'getFeeExemption',
        'brand_name' => 'getBrandName',
        'weee' => 'getWeee',
        'weight_and_units' => 'getWeightAndUnits',
        'rate_and_units' => 'getRateAndUnits',
        'currency' => 'getCurrency',
        'country' => 'getCountry',
        'subdivisions' => 'getSubdivisions',
        'live_mode' => 'getLiveMode',
        'metadata' => 'getMetadata',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_BATTERY = 'battery';
    const TYPE_WEEE = 'weee';
    const TYPE_COPYRIGHT = 'copyright';
    const TYPE_E_WASTE = 'e_waste';
    const TYPE_PACKAGING = 'packaging';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
       $allowable = [
            self::TYPE_BATTERY,
            self::TYPE_WEEE,
            self::TYPE_COPYRIGHT,
            self::TYPE_E_WASTE,
            self::TYPE_PACKAGING,
        ];

        $allowableAllCase = array_unique(array_merge(array_map('strtolower', $allowable), $allowable));
        return $allowableAllCase;
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['sku_id'] = isset($data['sku_id']) ? $data['sku_id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['battery'] = isset($data['battery']) ? $data['battery'] : null;
        $this->container['compliance_agency'] = isset($data['compliance_agency']) ? $data['compliance_agency'] : null;
        $this->container['fee_exemption'] = isset($data['fee_exemption']) ? $data['fee_exemption'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['weee'] = isset($data['weee']) ? $data['weee'] : null;
        $this->container['weight_and_units'] = isset($data['weight_and_units']) ? $data['weight_and_units'] : null;
        $this->container['rate_and_units'] = isset($data['rate_and_units']) ? $data['rate_and_units'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['subdivisions'] = isset($data['subdivisions']) ? $data['subdivisions'] : null;
        $this->container['live_mode'] = isset($data['live_mode']) ? $data['live_mode'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
       
        if (!is_null($this->container['type']) && !in_array(strtolower($this->container['type']), $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the fee.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time The time when the fee was created.
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of fee.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array(strtolower($type), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sku_id
     *
     * @return string|null
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param string|null $sku_id The unique identifer of the stock keeping unit associated with the fee.
     *
     * @return $this
     */
    public function setSkuId($sku_id)
    {
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The category of the fee as defined by regulatory law.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The value of the product.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount The fee amount.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets battery
     *
     * @return \DigitalRiver\ApiSdk\Model\Battery|null
     */
    public function getBattery()
    {
        return $this->container['battery'];
    }

    /**
     * Sets battery
     *
     * @param \DigitalRiver\ApiSdk\Model\Battery|null $battery battery
     *
     * @return $this
     */
    public function setBattery($battery)
    {
        $this->container['battery'] = $battery;

        return $this;
    }

    /**
     * Gets compliance_agency
     *
     * @return string|null
     */
    public function getComplianceAgency()
    {
        return $this->container['compliance_agency'];
    }

    /**
     * Sets compliance_agency
     *
     * @param string|null $compliance_agency The unique identifier of the recycling agency associated with the product's jurisdiction.
     *
     * @return $this
     */
    public function setComplianceAgency($compliance_agency)
    {
        $this->container['compliance_agency'] = $compliance_agency;

        return $this;
    }

    /**
     * Gets fee_exemption
     *
     * @return string|null
     */
    public function getFeeExemption()
    {
        return $this->container['fee_exemption'];
    }

    /**
     * Sets fee_exemption
     *
     * @param string|null $fee_exemption Indicates whether business to business sales are exempt from paying the fee.
     *
     * @return $this
     */
    public function setFeeExemption($fee_exemption)
    {
        $this->container['fee_exemption'] = $fee_exemption;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name The product's brand name.
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets weee
     *
     * @return \DigitalRiver\ApiSdk\Model\WEEE|null
     */
    public function getWeee()
    {
        return $this->container['weee'];
    }

    /**
     * Sets weee
     *
     * @param \DigitalRiver\ApiSdk\Model\WEEE|null $weee weee
     *
     * @return $this
     */
    public function setWeee($weee)
    {
        $this->container['weee'] = $weee;

        return $this;
    }

    /**
     * Gets weight_and_units
     *
     * @return string|null
     */
    public function getWeightAndUnits()
    {
        return $this->container['weight_and_units'];
    }

    /**
     * Sets weight_and_units
     *
     * @param string|null $weight_and_units The weight of the unit, minus packaging or batteries, and the unit of measurement applied to the weight.
     *
     * @return $this
     */
    public function setWeightAndUnits($weight_and_units)
    {
        $this->container['weight_and_units'] = $weight_and_units;

        return $this;
    }

    /**
     * Gets rate_and_units
     *
     * @return string|null
     */
    public function getRateAndUnits()
    {
        return $this->container['rate_and_units'];
    }

    /**
     * Sets rate_and_units
     *
     * @param string|null $rate_and_units The fee amount to be charged per product quantity.
     *
     * @return $this
     */
    public function setRateAndUnits($rate_and_units)
    {
        $this->container['rate_and_units'] = $rate_and_units;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency A three-letter ISO 4217 currency code.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country A two-letter ISO 3166 country code.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets subdivisions
     *
     * @return string[]|null
     */
    public function getSubdivisions()
    {
        return $this->container['subdivisions'];
    }

    /**
     * Sets subdivisions
     *
     * @param string[]|null $subdivisions An array of ISO 3166-2 subdivision codes.
     *
     * @return $this
     */
    public function setSubdivisions($subdivisions)
    {
        $this->container['subdivisions'] = $subdivisions;

        return $this;
    }

    /**
     * Gets live_mode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['live_mode'];
    }

    /**
     * Sets live_mode
     *
     * @param bool|null $live_mode Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.
     *
     * @return $this
     */
    public function setLiveMode($live_mode)
    {
        $this->container['live_mode'] = $live_mode;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,AnyType]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,AnyType]|null $metadata Key-value pairs used to store additional data. Value can be string, boolean or integer types.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time Time when the fee was last updated.
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


